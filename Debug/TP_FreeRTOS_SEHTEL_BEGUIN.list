
TP_FreeRTOS_SEHTEL_BEGUIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800687c  0800687c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a94  08006a94  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a94  08006a94  00007a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a9c  08006a9c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a9c  08006a9c  00007a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006aa0  08006aa0  00007aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006aa4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  2000006c  08006b10  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004218  08006b10  00008218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b78  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da0  00000000  00000000  00018c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0001b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9a  00000000  00000000  0001c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028674  00000000  00000000  0001d24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001266b  00000000  00000000  000458be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f282e  00000000  00000000  00057f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  0014a79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006864 	.word	0x08006864

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006864 	.word	0x08006864

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000008c 	.word	0x2000008c
 800060c:	200000e0 	.word	0x200000e0

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f91c 	bl	800386a <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006888 	.word	0x08006888
 8000644:	20000088 	.word	0x20000088

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 f956 	bl	8003902 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	4bad      	ldr	r3, [pc, #692]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aac      	ldr	r2, [pc, #688]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4baa      	ldr	r3, [pc, #680]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	4ba7      	ldr	r3, [pc, #668]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4aa6      	ldr	r2, [pc, #664]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4ba4      	ldr	r3, [pc, #656]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4ba1      	ldr	r3, [pc, #644]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa0      	ldr	r2, [pc, #640]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b9e      	ldr	r3, [pc, #632]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b98      	ldr	r3, [pc, #608]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b95      	ldr	r3, [pc, #596]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a94      	ldr	r2, [pc, #592]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b92      	ldr	r3, [pc, #584]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a8e      	ldr	r2, [pc, #568]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b8c      	ldr	r3, [pc, #560]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	4b89      	ldr	r3, [pc, #548]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a88      	ldr	r2, [pc, #544]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b86      	ldr	r3, [pc, #536]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b83      	ldr	r3, [pc, #524]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a82      	ldr	r2, [pc, #520]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b80      	ldr	r3, [pc, #512]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072e:	4b7d      	ldr	r3, [pc, #500]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7c      	ldr	r2, [pc, #496]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7a      	ldr	r3, [pc, #488]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b77      	ldr	r3, [pc, #476]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a76      	ldr	r2, [pc, #472]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b71      	ldr	r3, [pc, #452]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a70      	ldr	r2, [pc, #448]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	486b      	ldr	r0, [pc, #428]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800077c:	f001 fa6c 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000786:	4869      	ldr	r0, [pc, #420]	@ (800092c <MX_GPIO_Init+0x2d4>)
 8000788:	f001 fa66 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4867      	ldr	r0, [pc, #412]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 8000792:	f001 fa61 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4865      	ldr	r0, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x2dc>)
 800079e:	f001 fa5b 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	21c8      	movs	r1, #200	@ 0xc8
 80007a6:	4864      	ldr	r0, [pc, #400]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 80007a8:	f001 fa56 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007bc:	230e      	movs	r3, #14
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007c8:	f001 f882 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007cc:	2308      	movs	r3, #8
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007dc:	4619      	mov	r1, r3
 80007de:	4857      	ldr	r0, [pc, #348]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007e0:	f001 f876 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007f4:	2309      	movs	r3, #9
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	484f      	ldr	r0, [pc, #316]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000800:	f001 f866 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000804:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4845      	ldr	r0, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 8000822:	f001 f855 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000826:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	483e      	ldr	r0, [pc, #248]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000844:	f001 f844 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000866:	f001 f833 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800086a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800087c:	230a      	movs	r3, #10
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482e      	ldr	r0, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000888:	f001 f822 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80008a8:	f001 f812 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008bc:	2308      	movs	r3, #8
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80008c8:	f001 f802 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008de:	230c      	movs	r3, #12
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 80008ea:	f000 fff1 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000900:	2301      	movs	r3, #1
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	480f      	ldr	r0, [pc, #60]	@ (8000948 <MX_GPIO_Init+0x2f0>)
 800090c:	f000 ffe0 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000920:	230d      	movs	r3, #13
 8000922:	e013      	b.n	800094c <MX_GPIO_Init+0x2f4>
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40022000 	.word	0x40022000
 8000930:	40022800 	.word	0x40022800
 8000934:	40021c00 	.word	0x40021c00
 8000938:	40021800 	.word	0x40021800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	48bc      	ldr	r0, [pc, #752]	@ (8000c48 <MX_GPIO_Init+0x5f0>)
 8000956:	f000 ffbb 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	48b5      	ldr	r0, [pc, #724]	@ (8000c4c <MX_GPIO_Init+0x5f4>)
 8000976:	f000 ffab 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800097a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800098c:	230c      	movs	r3, #12
 800098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	48ae      	ldr	r0, [pc, #696]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000998:	f000 ff9a 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800099c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ae:	230e      	movs	r3, #14
 80009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	48a6      	ldr	r0, [pc, #664]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009ba:	f000 ff89 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	48a0      	ldr	r0, [pc, #640]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009d4:	f000 ff7c 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	489a      	ldr	r0, [pc, #616]	@ (8000c58 <MX_GPIO_Init+0x600>)
 80009ee:	f000 ff6f 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a04:	230c      	movs	r3, #12
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4892      	ldr	r0, [pc, #584]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000a10:	f000 ff5e 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	488a      	ldr	r0, [pc, #552]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000a32:	f000 ff4d 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a36:	23f0      	movs	r3, #240	@ 0xf0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a46:	230a      	movs	r3, #10
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4883      	ldr	r0, [pc, #524]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000a52:	f000 ff3d 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a56:	23f7      	movs	r3, #247	@ 0xf7
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a66:	230e      	movs	r3, #14
 8000a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	487c      	ldr	r0, [pc, #496]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000a72:	f000 ff2d 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	486f      	ldr	r0, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000a94:	f000 ff1c 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4866      	ldr	r0, [pc, #408]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000ab6:	f000 ff0b 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4861      	ldr	r0, [pc, #388]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000ad2:	f000 fefd 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4859      	ldr	r0, [pc, #356]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000af2:	f000 feed 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000af6:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4854      	ldr	r0, [pc, #336]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b10:	f000 fede 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	484f      	ldr	r0, [pc, #316]	@ (8000c68 <MX_GPIO_Init+0x610>)
 8000b2a:	f000 fed1 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b40:	230c      	movs	r3, #12
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4848      	ldr	r0, [pc, #288]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b4c:	f000 fec0 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b50:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b6e:	f000 feaf 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4836      	ldr	r0, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000b8a:	f000 fea1 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ba0:	230d      	movs	r3, #13
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000bac:	f000 fe90 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4825      	ldr	r0, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000bc4:	f000 fe84 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000be4:	f000 fe74 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000be8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000bfe:	f000 fe67 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c1c:	f000 fe58 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c20:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c32:	230d      	movs	r3, #13
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c3e:	f000 fe47 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e016      	b.n	8000c74 <MX_GPIO_Init+0x61c>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40022400 	.word	0x40022400
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022800 	.word	0x40022800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021c00 	.word	0x40021c00
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	48a4      	ldr	r0, [pc, #656]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000c8e:	f000 fe1f 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	489d      	ldr	r0, [pc, #628]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000caa:	f000 fe11 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4896      	ldr	r0, [pc, #600]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000ccc:	f000 fe00 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	488e      	ldr	r0, [pc, #568]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ce8:	f000 fdf2 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cec:	23c0      	movs	r3, #192	@ 0xc0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4888      	ldr	r0, [pc, #544]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d08:	f000 fde2 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	4881      	ldr	r0, [pc, #516]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d28:	f000 fdd2 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d2c:	2328      	movs	r3, #40	@ 0x28
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d44:	4619      	mov	r1, r3
 8000d46:	4879      	ldr	r0, [pc, #484]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d48:	f000 fdc2 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d4c:	23c8      	movs	r3, #200	@ 0xc8
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d60:	4619      	mov	r1, r3
 8000d62:	4873      	ldr	r0, [pc, #460]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000d64:	f000 fdb4 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d68:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	486d      	ldr	r0, [pc, #436]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000d7e:	f000 fda7 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d82:	2308      	movs	r3, #8
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d92:	230c      	movs	r3, #12
 8000d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4862      	ldr	r0, [pc, #392]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d9e:	f000 fd97 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000da2:	2305      	movs	r3, #5
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db2:	230a      	movs	r3, #10
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	485a      	ldr	r0, [pc, #360]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000dbe:	f000 fd87 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc2:	2332      	movs	r3, #50	@ 0x32
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4852      	ldr	r0, [pc, #328]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000dde:	f000 fd77 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de2:	2304      	movs	r3, #4
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df2:	2309      	movs	r3, #9
 8000df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	484e      	ldr	r0, [pc, #312]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000dfe:	f000 fd67 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e02:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e14:	2309      	movs	r3, #9
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4847      	ldr	r0, [pc, #284]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000e20:	f000 fd56 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e24:	2304      	movs	r3, #4
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e34:	4619      	mov	r1, r3
 8000e36:	483e      	ldr	r0, [pc, #248]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e38:	f000 fd4a 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3c:	2386      	movs	r3, #134	@ 0x86
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e54:	4619      	mov	r1, r3
 8000e56:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e58:	f000 fd3a 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e60:	2303      	movs	r3, #3
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e70:	f000 fd2e 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e74:	2350      	movs	r3, #80	@ 0x50
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e84:	230d      	movs	r3, #13
 8000e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e90:	f000 fd1e 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481e      	ldr	r0, [pc, #120]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000eb2:	f000 fd0d 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eb6:	2328      	movs	r3, #40	@ 0x28
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4814      	ldr	r0, [pc, #80]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000ed2:	f000 fcfd 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ed6:	2340      	movs	r3, #64	@ 0x40
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ee6:	2309      	movs	r3, #9
 8000ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000ef2:	f000 fced 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ef6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000f14:	f000 fcdc 	bl	80018d0 <HAL_GPIO_Init>

}
 8000f18:	bf00      	nop
 8000f1a:	3740      	adds	r7, #64	@ 0x40
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f44:	f3bf 8f4f 	dsb	sy
}
 8000f48:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <__NVIC_SystemReset+0x24>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f52:	4904      	ldr	r1, [pc, #16]	@ (8000f64 <__NVIC_SystemReset+0x24>)
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__NVIC_SystemReset+0x28>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <__NVIC_SystemReset+0x20>
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0004 	.word	0x05fa0004

08000f6c <__io_putchar>:
void TaskTake(void *argument);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f74:	1d39      	adds	r1, r7, #4
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <__io_putchar+0x20>)
 8000f7e:	f001 ff9d 	bl	8002ebc <HAL_UART_Transmit>
return ch;
 8000f82:	687b      	ldr	r3, [r7, #4]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200002f4 	.word	0x200002f4

08000f90 <StartLedTask>:

void StartLedTask(void *argument) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint8_t ledState = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  vTaskSuspend( NULL); // Suspend itself);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f003 fb21 	bl	80045e4 <vTaskSuspend>
  printf("Entering LedTask\n");
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <StartLedTask+0x58>)
 8000fa4:	f004 fdee 	bl	8005b84 <puts>
  for (;;) {
    ledState = !ledState;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf0c      	ite	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	2300      	movne	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4809      	ldr	r0, [pc, #36]	@ (8000fec <StartLedTask+0x5c>)
 8000fc8:	f000 fe46 	bl	8001c58 <HAL_GPIO_WritePin>
    printf("LED : %s\r\n", ledState ? "ON" : "OFF");
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <StartLedTask+0x46>
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <StartLedTask+0x60>)
 8000fd4:	e000      	b.n	8000fd8 <StartLedTask+0x48>
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <StartLedTask+0x64>)
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <StartLedTask+0x68>)
 8000fdc:	f004 fd6a 	bl	8005ab4 <iprintf>
    vTaskDelay(pdMS_TO_TICKS(100));
 8000fe0:	2064      	movs	r0, #100	@ 0x64
 8000fe2:	f003 fac7 	bl	8004574 <vTaskDelay>
    ledState = !ledState;
 8000fe6:	e7df      	b.n	8000fa8 <StartLedTask+0x18>
 8000fe8:	080068a4 	.word	0x080068a4
 8000fec:	40022000 	.word	0x40022000
 8000ff0:	080068b8 	.word	0x080068b8
 8000ff4:	080068bc 	.word	0x080068bc
 8000ff8:	080068c0 	.word	0x080068c0

08000ffc <TaskGive>:
  }
}

void TaskGive(void *argument) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t delay = 100;
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	60fb      	str	r3, [r7, #12]
  vTaskSuspend( NULL); // Suspend itself);
 8001008:	2000      	movs	r0, #0
 800100a:	f003 faeb 	bl	80045e4 <vTaskSuspend>
  for (;;) {
    printf("TaskGive: Sending delay value %lu to queue\r\n", delay);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4619      	mov	r1, r3
 8001012:	4810      	ldr	r0, [pc, #64]	@ (8001054 <TaskGive+0x58>)
 8001014:	f004 fd4e 	bl	8005ab4 <iprintf>
    if (xQueueSend(QueueTask, &delay, pdMS_TO_TICKS(100)) != pdPASS) {
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <TaskGive+0x5c>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	f107 010c 	add.w	r1, r7, #12
 8001020:	2300      	movs	r3, #0
 8001022:	2264      	movs	r2, #100	@ 0x64
 8001024:	f002 fe04 	bl	8003c30 <xQueueGenericSend>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d002      	beq.n	8001034 <TaskGive+0x38>
      printf("TaskGive: Failed to send delay value to queue\r\n");
 800102e:	480b      	ldr	r0, [pc, #44]	@ (800105c <TaskGive+0x60>)
 8001030:	f004 fda8 	bl	8005b84 <puts>
    }
    delay += 100; // Increment delay
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3364      	adds	r3, #100	@ 0x64
 8001038:	60fb      	str	r3, [r7, #12]
    vTaskDelay(pdMS_TO_TICKS(delay));
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <TaskGive+0x64>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	099b      	lsrs	r3, r3, #6
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fa91 	bl	8004574 <vTaskDelay>
    printf("TaskGive: Sending delay value %lu to queue\r\n", delay);
 8001052:	e7dc      	b.n	800100e <TaskGive+0x12>
 8001054:	080068cc 	.word	0x080068cc
 8001058:	200002ec 	.word	0x200002ec
 800105c:	080068fc 	.word	0x080068fc
 8001060:	10624dd3 	.word	0x10624dd3

08001064 <TaskTake>:
  }
}

void TaskTake(void *argument) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t receivedValue = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  vTaskSuspend( NULL); // Suspend itself);
 8001070:	2000      	movs	r0, #0
 8001072:	f003 fab7 	bl	80045e4 <vTaskSuspend>
  for (;;) {
    printf("TaskTake: Waiting to receive value from queue\r\n");
 8001076:	480e      	ldr	r0, [pc, #56]	@ (80010b0 <TaskTake+0x4c>)
 8001078:	f004 fd84 	bl	8005b84 <puts>
    if (xQueueReceive(QueueTask, &receivedValue, pdMS_TO_TICKS(1000)) == pdPASS) {
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <TaskTake+0x50>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f107 010c 	add.w	r1, r7, #12
 8001084:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fedb 	bl	8003e44 <xQueueReceive>
 800108e:	4603      	mov	r3, r0
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <TaskTake+0x3c>
      printf("TaskTake: Received delay value %lu from queue\r\n", receivedValue);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4619      	mov	r1, r3
 8001098:	4807      	ldr	r0, [pc, #28]	@ (80010b8 <TaskTake+0x54>)
 800109a:	f004 fd0b 	bl	8005ab4 <iprintf>
 800109e:	e7ea      	b.n	8001076 <TaskTake+0x12>
    } else {
      printf("TaskTake: Failed to receive value from queue within 1000 ms. Triggering system reset.\r\n");
 80010a0:	4806      	ldr	r0, [pc, #24]	@ (80010bc <TaskTake+0x58>)
 80010a2:	f004 fd6f 	bl	8005b84 <puts>
      vTaskDelay(pdMS_TO_TICKS(10));
 80010a6:	200a      	movs	r0, #10
 80010a8:	f003 fa64 	bl	8004574 <vTaskDelay>
      NVIC_SystemReset(); // Trigger reset
 80010ac:	f7ff ff48 	bl	8000f40 <__NVIC_SystemReset>
 80010b0:	0800692c 	.word	0x0800692c
 80010b4:	200002ec 	.word	0x200002ec
 80010b8:	0800695c 	.word	0x0800695c
 80010bc:	0800698c 	.word	0x0800698c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 fac0 	bl	800164a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f869 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f7ff fac3 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010d2:	f000 f9df 	bl	8001494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  QueueTask = xQueueCreate(10, sizeof(uint32_t)); // Create the queue
 80010d6:	2200      	movs	r2, #0
 80010d8:	2104      	movs	r1, #4
 80010da:	200a      	movs	r0, #10
 80010dc:	f002 fd46 	bl	8003b6c <xQueueGenericCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a22      	ldr	r2, [pc, #136]	@ (800116c <main+0xac>)
 80010e4:	6013      	str	r3, [r2, #0]
  if (QueueTask == NULL) {
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <main+0xac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d104      	bne.n	80010f8 <main+0x38>
    printf("Failed to create queue\r\n");
 80010ee:	4820      	ldr	r0, [pc, #128]	@ (8001170 <main+0xb0>)
 80010f0:	f004 fd48 	bl	8005b84 <puts>
    Error_Handler();
 80010f4:	f000 f8c2 	bl	800127c <Error_Handler>
  }

  xTaskCreate(TaskGive, "TaskGive", 128, NULL, tskIDLE_PRIORITY + 1, &TaskGiveHandle);
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <main+0xb4>)
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	491c      	ldr	r1, [pc, #112]	@ (8001178 <main+0xb8>)
 8001106:	481d      	ldr	r0, [pc, #116]	@ (800117c <main+0xbc>)
 8001108:	f003 f8fa 	bl	8004300 <xTaskCreate>
  xTaskCreate(TaskTake, "TaskTake", 128, NULL, tskIDLE_PRIORITY + 1, &TaskTakeHandle);
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <main+0xc0>)
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	491a      	ldr	r1, [pc, #104]	@ (8001184 <main+0xc4>)
 800111a:	481b      	ldr	r0, [pc, #108]	@ (8001188 <main+0xc8>)
 800111c:	f003 f8f0 	bl	8004300 <xTaskCreate>
  xTaskCreate(StartLedTask, "LedTask", 128, NULL, tskIDLE_PRIORITY + 1, &LedTaskHandle);
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <main+0xcc>)
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	2301      	movs	r3, #1
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2300      	movs	r3, #0
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	4918      	ldr	r1, [pc, #96]	@ (8001190 <main+0xd0>)
 800112e:	4819      	ldr	r0, [pc, #100]	@ (8001194 <main+0xd4>)
 8001130:	f003 f8e6 	bl	8004300 <xTaskCreate>

  printf("_\\||TP_FreeRTOS_SEHTEL_BEGUIN||//_");
 8001134:	4818      	ldr	r0, [pc, #96]	@ (8001198 <main+0xd8>)
 8001136:	f004 fcbd 	bl	8005ab4 <iprintf>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800113a:	f7ff fa69 	bl	8000610 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800113e:	f002 fb8d 	bl	800385c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(BTN_USER_GPIO_Port, BTN_USER_Pin) == GPIO_PIN_SET)
 8001142:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001146:	4815      	ldr	r0, [pc, #84]	@ (800119c <main+0xdc>)
 8001148:	f000 fd6e 	bl	8001c28 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d105      	bne.n	800115e <main+0x9e>
	  		{
	  			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2102      	movs	r1, #2
 8001156:	4811      	ldr	r0, [pc, #68]	@ (800119c <main+0xdc>)
 8001158:	f000 fd7e 	bl	8001c58 <HAL_GPIO_WritePin>
 800115c:	e7f1      	b.n	8001142 <main+0x82>
	  		}
	  		else
	  		{
	  			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2102      	movs	r1, #2
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <main+0xdc>)
 8001164:	f000 fd78 	bl	8001c58 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(BTN_USER_GPIO_Port, BTN_USER_Pin) == GPIO_PIN_SET)
 8001168:	e7eb      	b.n	8001142 <main+0x82>
 800116a:	bf00      	nop
 800116c:	200002ec 	.word	0x200002ec
 8001170:	080069e4 	.word	0x080069e4
 8001174:	200002e4 	.word	0x200002e4
 8001178:	080069fc 	.word	0x080069fc
 800117c:	08000ffd 	.word	0x08000ffd
 8001180:	200002e8 	.word	0x200002e8
 8001184:	08006a08 	.word	0x08006a08
 8001188:	08001065 	.word	0x08001065
 800118c:	200002e0 	.word	0x200002e0
 8001190:	08006a14 	.word	0x08006a14
 8001194:	08000f91 	.word	0x08000f91
 8001198:	08006a1c 	.word	0x08006a1c
 800119c:	40022000 	.word	0x40022000

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	@ 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 fdc8 	bl	8005d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <SystemClock_Config+0xd4>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001274 <SystemClock_Config+0xd4>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <SystemClock_Config+0xd4>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <SystemClock_Config+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a25      	ldr	r2, [pc, #148]	@ (8001278 <SystemClock_Config+0xd8>)
 80011e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <SystemClock_Config+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001208:	2319      	movs	r3, #25
 800120a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800120c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001210:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd84 	bl	8001d2c <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800122a:	f000 f827 	bl	800127c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800122e:	f000 fd2d 	bl	8001c8c <HAL_PWREx_EnableOverDrive>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001238:	f000 f820 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001248:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2107      	movs	r1, #7
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f80a 	bl	8002274 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001266:	f000 f809 	bl	800127c <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	@ 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	210f      	movs	r1, #15
 80012c2:	f06f 0001 	mvn.w	r0, #1
 80012c6:	f000 fada 	bl	800187e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f9d7 	bl	80016c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001316:	f003 fe19 	bl	8004f4c <xTaskGetSchedulerState>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d001      	beq.n	8001324 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001320:	f004 f8ca 	bl	80054b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133a:	f3af 8000 	nop.w
 800133e:	4601      	mov	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
  }

  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e009      	b.n	8001388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fdf5 	bl	8000f6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf1      	blt.n	8001374 <_write+0x12>
  }
  return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_close>:

int _close(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c2:	605a      	str	r2, [r3, #4]
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_isatty>:

int _isatty(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f004 fcd4 	bl	8005de0 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20050000 	.word	0x20050000
 8001464:	00000400 	.word	0x00000400
 8001468:	200002f0 	.word	0x200002f0
 800146c:	20004218 	.word	0x20004218

08001470 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 800149a:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <MX_USART1_UART_Init+0x5c>)
 800149c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_USART1_UART_Init+0x58>)
 80014d8:	f001 fca2 	bl	8002e20 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014e2:	f7ff fecb 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002f4 	.word	0x200002f4
 80014f0:	40011000 	.word	0x40011000

080014f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ac      	sub	sp, #176	@ 0xb0
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	2284      	movs	r2, #132	@ 0x84
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fc15 	bl	8005d44 <memset>
  if(uartHandle->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a32      	ldr	r2, [pc, #200]	@ (80015e8 <HAL_UART_MspInit+0xf4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d15c      	bne.n	80015de <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001524:	2340      	movs	r3, #64	@ 0x40
 8001526:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001528:	2300      	movs	r3, #0
 800152a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4618      	mov	r0, r3
 8001532:	f001 f885 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800153c:	f7ff fe9e 	bl	800127c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6453      	str	r3, [r2, #68]	@ 0x44
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6313      	str	r3, [r2, #48]	@ 0x30
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_UART_MspInit+0xf8>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a0:	2307      	movs	r3, #7
 80015a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015aa:	4619      	mov	r1, r3
 80015ac:	4810      	ldr	r0, [pc, #64]	@ (80015f0 <HAL_UART_MspInit+0xfc>)
 80015ae:	f000 f98f 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015cc:	2307      	movs	r3, #7
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <HAL_UART_MspInit+0x100>)
 80015da:	f000 f979 	bl	80018d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	37b0      	adds	r7, #176	@ 0xb0
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020000 	.word	0x40020000

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001630 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fc:	f7ff ff38 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001626:	f004 fbe1 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fd49 	bl	80010c0 <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800163c:	08006aa4 	.word	0x08006aa4
  ldr r2, =_sbss
 8001640:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001644:	20004218 	.word	0x20004218

08001648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>

0800164a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f90a 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001654:	200f      	movs	r0, #15
 8001656:	f000 f805 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165a:	f7ff fe15 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f917 	bl	80018b6 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f8ed 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	@ (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	2000037c 	.word	0x2000037c

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000037c 	.word	0x2000037c

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <__NVIC_SetPriorityGrouping+0x40>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	4313      	orrs	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <__NVIC_SetPriorityGrouping+0x40>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	05fa0000 	.word	0x05fa0000

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	@ (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff47 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff5c 	bl	800174c <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffb0 	bl	8001824 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e175      	b.n	8001bdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	f040 8164 	bne.w	8001bd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_GPIO_Init+0x56>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d130      	bne.n	8001988 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d017      	beq.n	80019c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d123      	bne.n	8001a18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80be 	beq.w	8001bd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <HAL_GPIO_Init+0x324>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_GPIO_Init+0x324>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a66:	4b63      	ldr	r3, [pc, #396]	@ (8001bf4 <HAL_GPIO_Init+0x324>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a72:	4a61      	ldr	r2, [pc, #388]	@ (8001bf8 <HAL_GPIO_Init+0x328>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a58      	ldr	r2, [pc, #352]	@ (8001bfc <HAL_GPIO_Init+0x32c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d037      	beq.n	8001b0e <HAL_GPIO_Init+0x23e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a57      	ldr	r2, [pc, #348]	@ (8001c00 <HAL_GPIO_Init+0x330>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d031      	beq.n	8001b0a <HAL_GPIO_Init+0x23a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a56      	ldr	r2, [pc, #344]	@ (8001c04 <HAL_GPIO_Init+0x334>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d02b      	beq.n	8001b06 <HAL_GPIO_Init+0x236>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a55      	ldr	r2, [pc, #340]	@ (8001c08 <HAL_GPIO_Init+0x338>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d025      	beq.n	8001b02 <HAL_GPIO_Init+0x232>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a54      	ldr	r2, [pc, #336]	@ (8001c0c <HAL_GPIO_Init+0x33c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x22e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a53      	ldr	r2, [pc, #332]	@ (8001c10 <HAL_GPIO_Init+0x340>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_Init+0x22a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	@ (8001c14 <HAL_GPIO_Init+0x344>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x226>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a51      	ldr	r2, [pc, #324]	@ (8001c18 <HAL_GPIO_Init+0x348>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x222>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a50      	ldr	r2, [pc, #320]	@ (8001c1c <HAL_GPIO_Init+0x34c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x21e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c20 <HAL_GPIO_Init+0x350>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x21a>
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	e012      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001aea:	230a      	movs	r3, #10
 8001aec:	e010      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001aee:	2308      	movs	r3, #8
 8001af0:	e00e      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e00c      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001af6:	2306      	movs	r3, #6
 8001af8:	e00a      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x240>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	@ (8001bf8 <HAL_GPIO_Init+0x328>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a34      	ldr	r2, [pc, #208]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b32      	ldr	r3, [pc, #200]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <HAL_GPIO_Init+0x354>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f ae86 	bls.w	80018f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021400 	.word	0x40021400
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40021c00 	.word	0x40021c00
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40022400 	.word	0x40022400
 8001c24:	40013c00 	.word	0x40013c00

08001c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e001      	b.n	8001c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c68:	787b      	ldrb	r3, [r7, #1]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c74:	e003      	b.n	8001c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	041a      	lsls	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	619a      	str	r2, [r3, #24]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a22      	ldr	r2, [pc, #136]	@ (8001d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cba:	f7ff fd17 	bl	80016ec <HAL_GetTick>
 8001cbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cc0:	e009      	b.n	8001cd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cc2:	f7ff fd13 	bl	80016ec <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cd0:	d901      	bls.n	8001cd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e022      	b.n	8001d1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf0:	f7ff fcfc 	bl	80016ec <HAL_GetTick>
 8001cf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cf6:	e009      	b.n	8001d0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cf8:	f7ff fcf8 	bl	80016ec <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d06:	d901      	bls.n	8001d0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e007      	b.n	8001d1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001d18:	d1ee      	bne.n	8001cf8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e291      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d50:	4b96      	ldr	r3, [pc, #600]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d00c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5c:	4b93      	ldr	r3, [pc, #588]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d112      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62>
 8001d68:	4b90      	ldr	r3, [pc, #576]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b8d      	ldr	r3, [pc, #564]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d06c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x130>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d168      	bne.n	8001e5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e26b      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x7a>
 8001d98:	4b84      	ldr	r3, [pc, #528]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a83      	ldr	r2, [pc, #524]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e02e      	b.n	8001e04 <HAL_RCC_OscConfig+0xd8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x9c>
 8001dae:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b7c      	ldr	r3, [pc, #496]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e01d      	b.n	8001e04 <HAL_RCC_OscConfig+0xd8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0xc0>
 8001dd2:	4b76      	ldr	r3, [pc, #472]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b73      	ldr	r3, [pc, #460]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a72      	ldr	r2, [pc, #456]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0xd8>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6e      	ldr	r2, [pc, #440]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b6c      	ldr	r3, [pc, #432]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6b      	ldr	r2, [pc, #428]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fc6e 	bl	80016ec <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fc6a 	bl	80016ec <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e21f      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b61      	ldr	r3, [pc, #388]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe8>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc5a 	bl	80016ec <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fc56 	bl	80016ec <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e20b      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	4b57      	ldr	r3, [pc, #348]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x110>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d069      	beq.n	8001f3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6a:	4b50      	ldr	r3, [pc, #320]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e76:	4b4d      	ldr	r3, [pc, #308]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d11c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x190>
 8001e82:	4b4a      	ldr	r3, [pc, #296]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e1df      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	493d      	ldr	r1, [pc, #244]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	e040      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	4b39      	ldr	r3, [pc, #228]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a38      	ldr	r2, [pc, #224]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc0c 	bl	80016ec <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc08 	bl	80016ec <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1bd      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b30      	ldr	r3, [pc, #192]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4929      	ldr	r1, [pc, #164]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
 8001f0a:	e018      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a26      	ldr	r2, [pc, #152]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fbe8 	bl	80016ec <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fbe4 	bl	80016ec <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e199      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d038      	beq.n	8001fbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d019      	beq.n	8001f86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f56:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fbc5 	bl	80016ec <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fbc1 	bl	80016ec <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e176      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x23a>
 8001f84:	e01a      	b.n	8001fbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f8a:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff fbab 	bl	80016ec <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fba7 	bl	80016ec <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d903      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e15c      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
 8001fac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b91      	ldr	r3, [pc, #580]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a4 	beq.w	8002112 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b8b      	ldr	r3, [pc, #556]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b88      	ldr	r3, [pc, #544]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	4a87      	ldr	r2, [pc, #540]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe2:	4b85      	ldr	r3, [pc, #532]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7e      	ldr	r2, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7ff fb6f 	bl	80016ec <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff fb6b 	bl	80016ec <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	@ 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e120      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b75      	ldr	r3, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x31a>
 8002038:	4b6f      	ldr	r3, [pc, #444]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a6e      	ldr	r2, [pc, #440]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
 8002044:	e02d      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x33c>
 800204e:	4b6a      	ldr	r3, [pc, #424]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	4a69      	ldr	r2, [pc, #420]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	@ 0x70
 800205a:	4b67      	ldr	r3, [pc, #412]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	4a66      	ldr	r2, [pc, #408]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	@ 0x70
 8002066:	e01c      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d10c      	bne.n	800208a <HAL_RCC_OscConfig+0x35e>
 8002070:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	4a60      	ldr	r2, [pc, #384]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	@ 0x70
 800207c:	4b5e      	ldr	r3, [pc, #376]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	4a5d      	ldr	r2, [pc, #372]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	@ 0x70
 8002088:	e00b      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
 800208a:	4b5b      	ldr	r3, [pc, #364]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	4a5a      	ldr	r2, [pc, #360]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	@ 0x70
 8002096:	4b58      	ldr	r3, [pc, #352]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	4a57      	ldr	r2, [pc, #348]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff fb1f 	bl	80016ec <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff fb1b 	bl	80016ec <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0ce      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ee      	beq.n	80020b2 <HAL_RCC_OscConfig+0x386>
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7ff fb09 	bl	80016ec <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff fb05 	bl	80016ec <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0b8      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f4:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4a3b      	ldr	r2, [pc, #236]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80a4 	beq.w	8002264 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d06b      	beq.n	8002200 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d149      	bne.n	80021c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fad6 	bl	80016ec <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff fad2 	bl	80016ec <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e087      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	4313      	orrs	r3, r2
 8002188:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800218e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff faa6 	bl	80016ec <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff faa2 	bl	80016ec <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e057      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x478>
 80021c2:	e04f      	b.n	8002264 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fa8c 	bl	80016ec <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff fa88 	bl	80016ec <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e03d      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4ac>
 80021f6:	e035      	b.n	8002264 <HAL_RCC_OscConfig+0x538>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_RCC_OscConfig+0x544>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d028      	beq.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d11a      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002236:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0d0      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	4965      	ldr	r1, [pc, #404]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d040      	beq.n	8002398 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d115      	bne.n	8002356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b41      	ldr	r3, [pc, #260]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e073      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06b      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b39      	ldr	r3, [pc, #228]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4936      	ldr	r1, [pc, #216]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002368:	f7ff f9c0 	bl	80016ec <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7ff f9bc 	bl	80016ec <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e053      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b2d      	ldr	r3, [pc, #180]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d210      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 020f 	bic.w	r2, r3, #15
 80023ae:	4922      	ldr	r1, [pc, #136]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	@ (8002440 <HAL_RCC_ClockConfig+0x1cc>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x1d0>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_ClockConfig+0x1d4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f91c 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08006a48 	.word	0x08006a48
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	b090      	sub	sp, #64	@ 0x40
 8002452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
 8002458:	2300      	movs	r3, #0
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002464:	4b59      	ldr	r3, [pc, #356]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d00d      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x40>
 8002470:	2b08      	cmp	r3, #8
 8002472:	f200 80a1 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x34>
 800247a:	2b04      	cmp	r3, #4
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x3a>
 800247e:	e09b      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b53      	ldr	r3, [pc, #332]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002484:	e09b      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b53      	ldr	r3, [pc, #332]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002488:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800248a:	e098      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4b4f      	ldr	r3, [pc, #316]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002496:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	2200      	movs	r2, #0
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024b4:	2100      	movs	r1, #0
 80024b6:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024b8:	fb03 f201 	mul.w	r2, r3, r1
 80024bc:	2300      	movs	r3, #0
 80024be:	fb00 f303 	mul.w	r3, r0, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	4a43      	ldr	r2, [pc, #268]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024c6:	fba0 1202 	umull	r1, r2, r0, r2
 80024ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024cc:	460a      	mov	r2, r1
 80024ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024d2:	4413      	add	r3, r2
 80024d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d8:	2200      	movs	r2, #0
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	61fa      	str	r2, [r7, #28]
 80024de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024e6:	f7fd fee3 	bl	80002b0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4613      	mov	r3, r2
 80024f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f2:	e053      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	2200      	movs	r2, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	617a      	str	r2, [r7, #20]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002506:	f04f 0b00 	mov.w	fp, #0
 800250a:	4652      	mov	r2, sl
 800250c:	465b      	mov	r3, fp
 800250e:	f04f 0000 	mov.w	r0, #0
 8002512:	f04f 0100 	mov.w	r1, #0
 8002516:	0159      	lsls	r1, r3, #5
 8002518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251c:	0150      	lsls	r0, r2, #5
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	ebb2 080a 	subs.w	r8, r2, sl
 8002526:	eb63 090b 	sbc.w	r9, r3, fp
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800253a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800253e:	ebb2 0408 	subs.w	r4, r2, r8
 8002542:	eb63 0509 	sbc.w	r5, r3, r9
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	00eb      	lsls	r3, r5, #3
 8002550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002554:	00e2      	lsls	r2, r4, #3
 8002556:	4614      	mov	r4, r2
 8002558:	461d      	mov	r5, r3
 800255a:	eb14 030a 	adds.w	r3, r4, sl
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	eb45 030b 	adc.w	r3, r5, fp
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002572:	4629      	mov	r1, r5
 8002574:	028b      	lsls	r3, r1, #10
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800257c:	4621      	mov	r1, r4
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002586:	2200      	movs	r2, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002590:	f7fd fe8e 	bl	80002b0 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3740      	adds	r7, #64	@ 0x40
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	017d7840 	.word	0x017d7840

080025d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	@ (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08006a58 	.word	0x08006a58

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	@ (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08006a58 	.word	0x08006a58

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002668:	4b69      	ldr	r3, [pc, #420]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a68      	ldr	r2, [pc, #416]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	4964      	ldr	r1, [pc, #400]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269a:	4b5d      	ldr	r3, [pc, #372]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a8:	4959      	ldr	r1, [pc, #356]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d017      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	494a      	ldr	r1, [pc, #296]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808b 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b3a      	ldr	r3, [pc, #232]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a39      	ldr	r2, [pc, #228]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800273c:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a34      	ldr	r2, [pc, #208]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7fe ffd0 	bl	80016ec <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe ffcc 	bl	80016ec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e357      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002762:	4b2c      	ldr	r3, [pc, #176]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800276e:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002776:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d035      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d02e      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800278c:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002794:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002796:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ae:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027b4:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d114      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ff94 	bl	80016ec <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe ff90 	bl	80016ec <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e319      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027f6:	d111      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002806:	400b      	ands	r3, r1
 8002808:	4901      	ldr	r1, [pc, #4]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
 800280e:	e00b      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
 8002818:	0ffffcff 	.word	0x0ffffcff
 800281c:	4baa      	ldr	r3, [pc, #680]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4aa9      	ldr	r2, [pc, #676]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002822:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	4ba7      	ldr	r3, [pc, #668]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	49a4      	ldr	r1, [pc, #656]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002836:	4313      	orrs	r3, r2
 8002838:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002846:	4ba0      	ldr	r3, [pc, #640]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800284c:	4a9e      	ldr	r2, [pc, #632]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002852:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002856:	4b9c      	ldr	r3, [pc, #624]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002858:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	4999      	ldr	r1, [pc, #612]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002874:	4b94      	ldr	r3, [pc, #592]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002882:	4991      	ldr	r1, [pc, #580]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002896:	4b8c      	ldr	r3, [pc, #560]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028a4:	4988      	ldr	r1, [pc, #544]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b8:	4b83      	ldr	r3, [pc, #524]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c6:	4980      	ldr	r1, [pc, #512]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028da:	4b7b      	ldr	r3, [pc, #492]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4977      	ldr	r1, [pc, #476]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b72      	ldr	r3, [pc, #456]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	496f      	ldr	r1, [pc, #444]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	f023 020c 	bic.w	r2, r3, #12
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	4966      	ldr	r1, [pc, #408]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002940:	4b61      	ldr	r3, [pc, #388]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	495e      	ldr	r1, [pc, #376]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002962:	4b59      	ldr	r3, [pc, #356]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002968:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002970:	4955      	ldr	r1, [pc, #340]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002984:	4b50      	ldr	r3, [pc, #320]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002992:	494d      	ldr	r1, [pc, #308]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029a6:	4b48      	ldr	r3, [pc, #288]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	4944      	ldr	r1, [pc, #272]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029c8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d6:	493c      	ldr	r1, [pc, #240]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029ea:	4b37      	ldr	r3, [pc, #220]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f8:	4933      	ldr	r1, [pc, #204]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a1a:	492b      	ldr	r1, [pc, #172]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a3c:	4922      	ldr	r1, [pc, #136]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7c:	4912      	ldr	r1, [pc, #72]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa0:	4909      	ldr	r1, [pc, #36]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d006      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80d9 	beq.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002abc:	4b02      	ldr	r3, [pc, #8]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a01      	ldr	r2, [pc, #4]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ac6:	e001      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ace:	f7fe fe0d 	bl	80016ec <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ad6:	f7fe fe09 	bl	80016ec <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e194      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d021      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11d      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b08:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b16:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b1c:	0e1b      	lsrs	r3, r3, #24
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	019a      	lsls	r2, r3, #6
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	071b      	lsls	r3, r3, #28
 8002b3c:	4957      	ldr	r1, [pc, #348]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d02e      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6e:	d129      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b70:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b84:	0f1b      	lsrs	r3, r3, #28
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	493d      	ldr	r1, [pc, #244]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bac:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb2:	f023 021f 	bic.w	r2, r3, #31
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	4937      	ldr	r1, [pc, #220]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bd0:	4b32      	ldr	r3, [pc, #200]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd6:	0e1b      	lsrs	r3, r3, #24
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bde:	4b2f      	ldr	r3, [pc, #188]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be4:	0f1b      	lsrs	r3, r3, #28
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	019a      	lsls	r2, r3, #6
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	071b      	lsls	r3, r3, #28
 8002c04:	4925      	ldr	r1, [pc, #148]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	019a      	lsls	r2, r3, #6
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	071b      	lsls	r3, r3, #28
 8002c34:	4919      	ldr	r1, [pc, #100]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c3c:	4b17      	ldr	r3, [pc, #92]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe fd50 	bl	80016ec <HAL_GetTick>
 8002c4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c50:	f7fe fd4c 	bl	80016ec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0d7      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c62:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 80cd 	bne.w	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a08      	ldr	r2, [pc, #32]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c82:	f7fe fd33 	bl	80016ec <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c8a:	f7fe fd2f 	bl	80016ec <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	@ 0x64
 8002c96:	d903      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0ba      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cac:	d0ed      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02e      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12a      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cd6:	4b51      	ldr	r3, [pc, #324]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cea:	0f1b      	lsrs	r3, r3, #28
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	019a      	lsls	r2, r3, #6
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	4944      	ldr	r1, [pc, #272]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d12:	4b42      	ldr	r3, [pc, #264]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d18:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	493d      	ldr	r1, [pc, #244]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d022      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d40:	d11d      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d42:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d50:	4b32      	ldr	r3, [pc, #200]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	0f1b      	lsrs	r3, r3, #28
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	019a      	lsls	r2, r3, #6
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	071b      	lsls	r3, r3, #28
 8002d76:	4929      	ldr	r1, [pc, #164]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	0e1b      	lsrs	r3, r3, #24
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d98:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4917      	ldr	r1, [pc, #92]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	4911      	ldr	r1, [pc, #68]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0e      	ldr	r2, [pc, #56]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fc80 	bl	80016ec <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002df0:	f7fe fc7c 	bl	80016ec <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e007      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e0e:	d1ef      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e040      	b.n	8002eb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fb56 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	@ 0x24
 8002e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fb16 	bl	8003498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8af 	bl	8002fd0 <UART_SetConfig>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e01b      	b.n	8002eb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb95 	bl	80035dc <UART_CheckIdleState>
 8002eb2:	4603      	mov	r3, r0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d177      	bne.n	8002fc4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_UART_Transmit+0x24>
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e070      	b.n	8002fc6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2221      	movs	r2, #33	@ 0x21
 8002ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fbfb 	bl	80016ec <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f10:	d108      	bne.n	8002f24 <HAL_UART_Transmit+0x68>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	e003      	b.n	8002f2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f2c:	e02f      	b.n	8002f8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fba6 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e03b      	b.n	8002fc6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	3302      	adds	r3, #2
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e007      	b.n	8002f7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1c9      	bne.n	8002f2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2140      	movs	r1, #64	@ 0x40
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb70 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e005      	b.n	8002fc6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4ba6      	ldr	r3, [pc, #664]	@ (8003294 <UART_SetConfig+0x2c4>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	6979      	ldr	r1, [r7, #20]
 8003004:	430b      	orrs	r3, r1
 8003006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a94      	ldr	r2, [pc, #592]	@ (8003298 <UART_SetConfig+0x2c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d120      	bne.n	800308e <UART_SetConfig+0xbe>
 800304c:	4b93      	ldr	r3, [pc, #588]	@ (800329c <UART_SetConfig+0x2cc>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d816      	bhi.n	8003088 <UART_SetConfig+0xb8>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <UART_SetConfig+0x90>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	0800307d 	.word	0x0800307d
 8003068:	08003077 	.word	0x08003077
 800306c:	08003083 	.word	0x08003083
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e150      	b.n	8003318 <UART_SetConfig+0x348>
 8003076:	2302      	movs	r3, #2
 8003078:	77fb      	strb	r3, [r7, #31]
 800307a:	e14d      	b.n	8003318 <UART_SetConfig+0x348>
 800307c:	2304      	movs	r3, #4
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e14a      	b.n	8003318 <UART_SetConfig+0x348>
 8003082:	2308      	movs	r3, #8
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e147      	b.n	8003318 <UART_SetConfig+0x348>
 8003088:	2310      	movs	r3, #16
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e144      	b.n	8003318 <UART_SetConfig+0x348>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a83      	ldr	r2, [pc, #524]	@ (80032a0 <UART_SetConfig+0x2d0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d132      	bne.n	80030fe <UART_SetConfig+0x12e>
 8003098:	4b80      	ldr	r3, [pc, #512]	@ (800329c <UART_SetConfig+0x2cc>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d828      	bhi.n	80030f8 <UART_SetConfig+0x128>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <UART_SetConfig+0xdc>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030f9 	.word	0x080030f9
 80030b4:	080030f9 	.word	0x080030f9
 80030b8:	080030f9 	.word	0x080030f9
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	080030f9 	.word	0x080030f9
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080030f9 	.word	0x080030f9
 80030cc:	080030e7 	.word	0x080030e7
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	080030f9 	.word	0x080030f9
 80030dc:	080030f3 	.word	0x080030f3
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e118      	b.n	8003318 <UART_SetConfig+0x348>
 80030e6:	2302      	movs	r3, #2
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e115      	b.n	8003318 <UART_SetConfig+0x348>
 80030ec:	2304      	movs	r3, #4
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e112      	b.n	8003318 <UART_SetConfig+0x348>
 80030f2:	2308      	movs	r3, #8
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e10f      	b.n	8003318 <UART_SetConfig+0x348>
 80030f8:	2310      	movs	r3, #16
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e10c      	b.n	8003318 <UART_SetConfig+0x348>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a68      	ldr	r2, [pc, #416]	@ (80032a4 <UART_SetConfig+0x2d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d120      	bne.n	800314a <UART_SetConfig+0x17a>
 8003108:	4b64      	ldr	r3, [pc, #400]	@ (800329c <UART_SetConfig+0x2cc>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003112:	2b30      	cmp	r3, #48	@ 0x30
 8003114:	d013      	beq.n	800313e <UART_SetConfig+0x16e>
 8003116:	2b30      	cmp	r3, #48	@ 0x30
 8003118:	d814      	bhi.n	8003144 <UART_SetConfig+0x174>
 800311a:	2b20      	cmp	r3, #32
 800311c:	d009      	beq.n	8003132 <UART_SetConfig+0x162>
 800311e:	2b20      	cmp	r3, #32
 8003120:	d810      	bhi.n	8003144 <UART_SetConfig+0x174>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x15c>
 8003126:	2b10      	cmp	r3, #16
 8003128:	d006      	beq.n	8003138 <UART_SetConfig+0x168>
 800312a:	e00b      	b.n	8003144 <UART_SetConfig+0x174>
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e0f2      	b.n	8003318 <UART_SetConfig+0x348>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0ef      	b.n	8003318 <UART_SetConfig+0x348>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e0ec      	b.n	8003318 <UART_SetConfig+0x348>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e0e9      	b.n	8003318 <UART_SetConfig+0x348>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e0e6      	b.n	8003318 <UART_SetConfig+0x348>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a56      	ldr	r2, [pc, #344]	@ (80032a8 <UART_SetConfig+0x2d8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d120      	bne.n	8003196 <UART_SetConfig+0x1c6>
 8003154:	4b51      	ldr	r3, [pc, #324]	@ (800329c <UART_SetConfig+0x2cc>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800315e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003160:	d013      	beq.n	800318a <UART_SetConfig+0x1ba>
 8003162:	2bc0      	cmp	r3, #192	@ 0xc0
 8003164:	d814      	bhi.n	8003190 <UART_SetConfig+0x1c0>
 8003166:	2b80      	cmp	r3, #128	@ 0x80
 8003168:	d009      	beq.n	800317e <UART_SetConfig+0x1ae>
 800316a:	2b80      	cmp	r3, #128	@ 0x80
 800316c:	d810      	bhi.n	8003190 <UART_SetConfig+0x1c0>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x1a8>
 8003172:	2b40      	cmp	r3, #64	@ 0x40
 8003174:	d006      	beq.n	8003184 <UART_SetConfig+0x1b4>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x1c0>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e0cc      	b.n	8003318 <UART_SetConfig+0x348>
 800317e:	2302      	movs	r3, #2
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e0c9      	b.n	8003318 <UART_SetConfig+0x348>
 8003184:	2304      	movs	r3, #4
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0c6      	b.n	8003318 <UART_SetConfig+0x348>
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0c3      	b.n	8003318 <UART_SetConfig+0x348>
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e0c0      	b.n	8003318 <UART_SetConfig+0x348>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a44      	ldr	r2, [pc, #272]	@ (80032ac <UART_SetConfig+0x2dc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d125      	bne.n	80031ec <UART_SetConfig+0x21c>
 80031a0:	4b3e      	ldr	r3, [pc, #248]	@ (800329c <UART_SetConfig+0x2cc>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ae:	d017      	beq.n	80031e0 <UART_SetConfig+0x210>
 80031b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b4:	d817      	bhi.n	80031e6 <UART_SetConfig+0x216>
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ba:	d00b      	beq.n	80031d4 <UART_SetConfig+0x204>
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c0:	d811      	bhi.n	80031e6 <UART_SetConfig+0x216>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <UART_SetConfig+0x1fe>
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ca:	d006      	beq.n	80031da <UART_SetConfig+0x20a>
 80031cc:	e00b      	b.n	80031e6 <UART_SetConfig+0x216>
 80031ce:	2300      	movs	r3, #0
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e0a1      	b.n	8003318 <UART_SetConfig+0x348>
 80031d4:	2302      	movs	r3, #2
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e09e      	b.n	8003318 <UART_SetConfig+0x348>
 80031da:	2304      	movs	r3, #4
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e09b      	b.n	8003318 <UART_SetConfig+0x348>
 80031e0:	2308      	movs	r3, #8
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e098      	b.n	8003318 <UART_SetConfig+0x348>
 80031e6:	2310      	movs	r3, #16
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e095      	b.n	8003318 <UART_SetConfig+0x348>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2f      	ldr	r2, [pc, #188]	@ (80032b0 <UART_SetConfig+0x2e0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d125      	bne.n	8003242 <UART_SetConfig+0x272>
 80031f6:	4b29      	ldr	r3, [pc, #164]	@ (800329c <UART_SetConfig+0x2cc>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003204:	d017      	beq.n	8003236 <UART_SetConfig+0x266>
 8003206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800320a:	d817      	bhi.n	800323c <UART_SetConfig+0x26c>
 800320c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003210:	d00b      	beq.n	800322a <UART_SetConfig+0x25a>
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003216:	d811      	bhi.n	800323c <UART_SetConfig+0x26c>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <UART_SetConfig+0x254>
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	d006      	beq.n	8003230 <UART_SetConfig+0x260>
 8003222:	e00b      	b.n	800323c <UART_SetConfig+0x26c>
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e076      	b.n	8003318 <UART_SetConfig+0x348>
 800322a:	2302      	movs	r3, #2
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e073      	b.n	8003318 <UART_SetConfig+0x348>
 8003230:	2304      	movs	r3, #4
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e070      	b.n	8003318 <UART_SetConfig+0x348>
 8003236:	2308      	movs	r3, #8
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e06d      	b.n	8003318 <UART_SetConfig+0x348>
 800323c:	2310      	movs	r3, #16
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e06a      	b.n	8003318 <UART_SetConfig+0x348>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <UART_SetConfig+0x2e4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d138      	bne.n	80032be <UART_SetConfig+0x2ee>
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <UART_SetConfig+0x2cc>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800325a:	d017      	beq.n	800328c <UART_SetConfig+0x2bc>
 800325c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003260:	d82a      	bhi.n	80032b8 <UART_SetConfig+0x2e8>
 8003262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003266:	d00b      	beq.n	8003280 <UART_SetConfig+0x2b0>
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800326c:	d824      	bhi.n	80032b8 <UART_SetConfig+0x2e8>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <UART_SetConfig+0x2aa>
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003276:	d006      	beq.n	8003286 <UART_SetConfig+0x2b6>
 8003278:	e01e      	b.n	80032b8 <UART_SetConfig+0x2e8>
 800327a:	2300      	movs	r3, #0
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e04b      	b.n	8003318 <UART_SetConfig+0x348>
 8003280:	2302      	movs	r3, #2
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e048      	b.n	8003318 <UART_SetConfig+0x348>
 8003286:	2304      	movs	r3, #4
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e045      	b.n	8003318 <UART_SetConfig+0x348>
 800328c:	2308      	movs	r3, #8
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e042      	b.n	8003318 <UART_SetConfig+0x348>
 8003292:	bf00      	nop
 8003294:	efff69f3 	.word	0xefff69f3
 8003298:	40011000 	.word	0x40011000
 800329c:	40023800 	.word	0x40023800
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40004800 	.word	0x40004800
 80032a8:	40004c00 	.word	0x40004c00
 80032ac:	40005000 	.word	0x40005000
 80032b0:	40011400 	.word	0x40011400
 80032b4:	40007800 	.word	0x40007800
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e02c      	b.n	8003318 <UART_SetConfig+0x348>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a72      	ldr	r2, [pc, #456]	@ (800348c <UART_SetConfig+0x4bc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d125      	bne.n	8003314 <UART_SetConfig+0x344>
 80032c8:	4b71      	ldr	r3, [pc, #452]	@ (8003490 <UART_SetConfig+0x4c0>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032d6:	d017      	beq.n	8003308 <UART_SetConfig+0x338>
 80032d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032dc:	d817      	bhi.n	800330e <UART_SetConfig+0x33e>
 80032de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e2:	d00b      	beq.n	80032fc <UART_SetConfig+0x32c>
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e8:	d811      	bhi.n	800330e <UART_SetConfig+0x33e>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <UART_SetConfig+0x326>
 80032ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f2:	d006      	beq.n	8003302 <UART_SetConfig+0x332>
 80032f4:	e00b      	b.n	800330e <UART_SetConfig+0x33e>
 80032f6:	2300      	movs	r3, #0
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e00d      	b.n	8003318 <UART_SetConfig+0x348>
 80032fc:	2302      	movs	r3, #2
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e00a      	b.n	8003318 <UART_SetConfig+0x348>
 8003302:	2304      	movs	r3, #4
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e007      	b.n	8003318 <UART_SetConfig+0x348>
 8003308:	2308      	movs	r3, #8
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e004      	b.n	8003318 <UART_SetConfig+0x348>
 800330e:	2310      	movs	r3, #16
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e001      	b.n	8003318 <UART_SetConfig+0x348>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003320:	d15b      	bne.n	80033da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d828      	bhi.n	800337a <UART_SetConfig+0x3aa>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0x360>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003355 	.word	0x08003355
 8003334:	0800335d 	.word	0x0800335d
 8003338:	08003365 	.word	0x08003365
 800333c:	0800337b 	.word	0x0800337b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800337b 	.word	0x0800337b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7ff f94c 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003358:	61b8      	str	r0, [r7, #24]
        break;
 800335a:	e013      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800335c:	f7ff f95c 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b4b      	ldr	r3, [pc, #300]	@ (8003494 <UART_SetConfig+0x4c4>)
 8003366:	61bb      	str	r3, [r7, #24]
        break;
 8003368:	e00c      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7ff f86f 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800336e:	61b8      	str	r0, [r7, #24]
        break;
 8003370:	e008      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e004      	b.n	8003384 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77bb      	strb	r3, [r7, #30]
        break;
 8003382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d074      	beq.n	8003474 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	005a      	lsls	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	441a      	add	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	d916      	bls.n	80033d4 <UART_SetConfig+0x404>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ac:	d212      	bcs.n	80033d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	89fa      	ldrh	r2, [r7, #14]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e04f      	b.n	8003474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77bb      	strb	r3, [r7, #30]
 80033d8:	e04c      	b.n	8003474 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033da:	7ffb      	ldrb	r3, [r7, #31]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d828      	bhi.n	8003432 <UART_SetConfig+0x462>
 80033e0:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <UART_SetConfig+0x418>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	08003415 	.word	0x08003415
 80033f0:	0800341d 	.word	0x0800341d
 80033f4:	08003433 	.word	0x08003433
 80033f8:	08003423 	.word	0x08003423
 80033fc:	08003433 	.word	0x08003433
 8003400:	08003433 	.word	0x08003433
 8003404:	08003433 	.word	0x08003433
 8003408:	0800342b 	.word	0x0800342b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800340c:	f7ff f8f0 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003410:	61b8      	str	r0, [r7, #24]
        break;
 8003412:	e013      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003414:	f7ff f900 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003418:	61b8      	str	r0, [r7, #24]
        break;
 800341a:	e00f      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800341c:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <UART_SetConfig+0x4c4>)
 800341e:	61bb      	str	r3, [r7, #24]
        break;
 8003420:	e00c      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003422:	f7ff f813 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8003426:	61b8      	str	r0, [r7, #24]
        break;
 8003428:	e008      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800342a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800342e:	61bb      	str	r3, [r7, #24]
        break;
 8003430:	e004      	b.n	800343c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	77bb      	strb	r3, [r7, #30]
        break;
 800343a:	bf00      	nop
    }

    if (pclk != 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085a      	lsrs	r2, r3, #1
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d909      	bls.n	8003470 <UART_SetConfig+0x4a0>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003462:	d205      	bcs.n	8003470 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	e001      	b.n	8003474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003480:	7fbb      	ldrb	r3, [r7, #30]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40007c00 	.word	0x40007c00
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400

08003498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01a      	beq.n	80035ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003596:	d10a      	bne.n	80035ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	@ 0x30
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035ec:	f7fe f87e 	bl	80016ec <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d12e      	bne.n	800365e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f83b 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d021      	beq.n	800365e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	60fb      	str	r3, [r7, #12]
   return(result);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	617b      	str	r3, [r7, #20]
   return(result);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e011      	b.n	8003682 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3728      	adds	r7, #40	@ 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	e04f      	b.n	800373c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d04b      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fe f822 	bl	80016ec <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <UART_WaitOnFlagUntilTimeout+0x30>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e04e      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d037      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0xb2>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b80      	cmp	r3, #128	@ 0x80
 80036d0:	d034      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0xb2>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d031      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d110      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2208      	movs	r2, #8
 80036ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f838 	bl	8003764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2208      	movs	r2, #8
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e029      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003716:	d111      	bne.n	800373c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003720:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f81e 	bl	8003764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e00f      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	429a      	cmp	r2, r3
 8003758:	d0a0      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b095      	sub	sp, #84	@ 0x54
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800378a:	643b      	str	r3, [r7, #64]	@ 0x40
 800378c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e6      	bne.n	800376c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e5      	bne.n	800379e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d118      	bne.n	800380c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f023 0310 	bic.w	r3, r3, #16
 80037ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6979      	ldr	r1, [r7, #20]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	613b      	str	r3, [r7, #16]
   return(result);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e6      	bne.n	80037da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003820:	bf00      	nop
 8003822:	3754      	adds	r7, #84	@ 0x54
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800383a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383e:	2b84      	cmp	r3, #132	@ 0x84
 8003840:	d005      	beq.n	800384e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003842:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	3303      	adds	r3, #3
 800384c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800384e:	68fb      	ldr	r3, [r7, #12]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003860:	f000 ff56 	bl	8004710 <vTaskStartScheduler>
  
  return osOK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	bd80      	pop	{r7, pc}

0800386a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800386a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386c:	b089      	sub	sp, #36	@ 0x24
 800386e:	af04      	add	r7, sp, #16
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <osThreadCreate+0x54>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01c      	beq.n	80038be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685c      	ldr	r4, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691e      	ldr	r6, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ffc8 	bl	800382c <makeFreeRtosPriority>
 800389c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038a6:	9202      	str	r2, [sp, #8]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	9100      	str	r1, [sp, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4632      	mov	r2, r6
 80038b0:	4629      	mov	r1, r5
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 fcbe 	bl	8004234 <xTaskCreateStatic>
 80038b8:	4603      	mov	r3, r0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e01c      	b.n	80038f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685c      	ldr	r4, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ffaa 	bl	800382c <makeFreeRtosPriority>
 80038d8:	4602      	mov	r2, r0
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	9200      	str	r2, [sp, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	4632      	mov	r2, r6
 80038e6:	4629      	mov	r1, r5
 80038e8:	4620      	mov	r0, r4
 80038ea:	f000 fd09 	bl	8004300 <xTaskCreate>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038f8:	68fb      	ldr	r3, [r7, #12]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003902 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <osDelay+0x16>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	e000      	b.n	800391a <osDelay+0x18>
 8003918:	2301      	movs	r3, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fe2a 	bl	8004574 <vTaskDelay>
  
  return osOK;
 8003920:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f103 0208 	add.w	r2, r3, #8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f04f 32ff 	mov.w	r2, #4294967295
 8003942:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f103 0208 	add.w	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f103 0208 	add.w	r2, r3, #8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d103      	bne.n	80039ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e00c      	b.n	8003a06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3308      	adds	r3, #8
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e002      	b.n	80039fa <vListInsert+0x2e>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d2f6      	bcs.n	80039f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6852      	ldr	r2, [r2, #4]
 8003a5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d103      	bne.n	8003a72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	b672      	cpsid	i
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	b662      	cpsie	i
 8003abc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003ac4:	f001 fc62 	bl	800538c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	3b01      	subs	r3, #1
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	441a      	add	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	22ff      	movs	r2, #255	@ 0xff
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	22ff      	movs	r2, #255	@ 0xff
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d114      	bne.n	8003b44 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01a      	beq.n	8003b58 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3310      	adds	r3, #16
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f848 	bl	8004bbc <xTaskRemoveFromEventList>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <xQueueGenericReset+0xd4>)
 8003b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	e009      	b.n	8003b58 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3310      	adds	r3, #16
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff feee 	bl	800392a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3324      	adds	r3, #36	@ 0x24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fee9 	bl	800392a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b58:	f001 fc4e 	bl	80053f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b5c:	2301      	movs	r3, #1
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	@ 0x28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10d      	bne.n	8003b9c <xQueueGenericCreate+0x30>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	b672      	cpsid	i
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	b662      	cpsie	i
 8003b94:	613b      	str	r3, [r7, #16]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e004      	b.n	8003bb2 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3348      	adds	r3, #72	@ 0x48
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 fcd0 	bl	800555c <pvPortMalloc>
 8003bbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d011      	beq.n	8003be8 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	3348      	adds	r3, #72	@ 0x48
 8003bcc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bd6:	79fa      	ldrb	r2, [r7, #7]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f805 	bl	8003bf2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003be8:	69bb      	ldr	r3, [r7, #24]
	}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e002      	b.n	8003c14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c20:	2101      	movs	r1, #1
 8003c22:	69b8      	ldr	r0, [r7, #24]
 8003c24:	f7ff ff36 	bl	8003a94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08e      	sub	sp, #56	@ 0x38
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <xQueueGenericSend+0x38>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	b672      	cpsid	i
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	b662      	cpsie	i
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <xQueueGenericSend+0x46>
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericSend+0x4a>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericSend+0x4c>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <xQueueGenericSend+0x6c>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	b672      	cpsid	i
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	b662      	cpsie	i
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d103      	bne.n	8003caa <xQueueGenericSend+0x7a>
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <xQueueGenericSend+0x7e>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueGenericSend+0x80>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <xQueueGenericSend+0xa0>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	b672      	cpsid	i
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	b662      	cpsie	i
 8003cc8:	623b      	str	r3, [r7, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd0:	f001 f93c 	bl	8004f4c <xTaskGetSchedulerState>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <xQueueGenericSend+0xb0>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <xQueueGenericSend+0xb4>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <xQueueGenericSend+0xb6>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <xQueueGenericSend+0xd6>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	b672      	cpsid	i
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	b662      	cpsie	i
 8003cfe:	61fb      	str	r3, [r7, #28]
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	e7fd      	b.n	8003d02 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d06:	f001 fb41 	bl	800538c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <xQueueGenericSend+0xec>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d129      	bne.n	8003d70 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d22:	f000 f977 	bl	8004014 <prvCopyDataToQueue>
 8003d26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	3324      	adds	r3, #36	@ 0x24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 ff41 	bl	8004bbc <xTaskRemoveFromEventList>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d40:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <xQueueGenericSend+0x210>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	e00a      	b.n	8003d68 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d58:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <xQueueGenericSend+0x210>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d68:	f001 fb46 	bl	80053f8 <vPortExitCritical>
				return pdPASS;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e063      	b.n	8003e38 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d76:	f001 fb3f 	bl	80053f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e05c      	b.n	8003e38 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ff7d 	bl	8004c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d92:	f001 fb31 	bl	80053f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d96:	f000 fd21 	bl	80047dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d9a:	f001 faf7 	bl	800538c <vPortEnterCritical>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d103      	bne.n	8003db4 <xQueueGenericSend+0x184>
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueGenericSend+0x19a>
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dca:	f001 fb15 	bl	80053f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dce:	1d3a      	adds	r2, r7, #4
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 ff6c 	bl	8004cb4 <xTaskCheckForTimeOut>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d124      	bne.n	8003e2c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003de2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003de4:	f000 fa0e 	bl	8004204 <prvIsQueueFull>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d018      	beq.n	8003e20 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	3310      	adds	r3, #16
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 feb8 	bl	8004b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dfe:	f000 f999 	bl	8004134 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e02:	f000 fcf9 	bl	80047f8 <xTaskResumeAll>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af7c 	bne.w	8003d06 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <xQueueGenericSend+0x210>)
 8003e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	e772      	b.n	8003d06 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e22:	f000 f987 	bl	8004134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e26:	f000 fce7 	bl	80047f8 <xTaskResumeAll>
 8003e2a:	e76c      	b.n	8003d06 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e2e:	f000 f981 	bl	8004134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e32:	f000 fce1 	bl	80047f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3738      	adds	r7, #56	@ 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	@ 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <xQueueReceive+0x36>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	b672      	cpsid	i
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	b662      	cpsie	i
 8003e72:	623b      	str	r3, [r7, #32]
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	e7fd      	b.n	8003e76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0x44>
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <xQueueReceive+0x48>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <xQueueReceive+0x4a>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <xQueueReceive+0x6a>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	b672      	cpsid	i
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	b662      	cpsie	i
 8003ea6:	61fb      	str	r3, [r7, #28]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eae:	f001 f84d 	bl	8004f4c <xTaskGetSchedulerState>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xQueueReceive+0x7a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <xQueueReceive+0x7e>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <xQueueReceive+0x80>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <xQueueReceive+0xa0>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ecc:	b672      	cpsid	i
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	b662      	cpsie	i
 8003edc:	61bb      	str	r3, [r7, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ee4:	f001 fa52 	bl	800538c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01f      	beq.n	8003f34 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef8:	f000 f8f6 	bl	80040e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	1e5a      	subs	r2, r3, #1
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00f      	beq.n	8003f2c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	3310      	adds	r3, #16
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe53 	bl	8004bbc <xTaskRemoveFromEventList>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8004010 <xQueueReceive+0x1cc>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f2c:	f001 fa64 	bl	80053f8 <vPortExitCritical>
				return pdPASS;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e069      	b.n	8004008 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f3a:	f001 fa5d 	bl	80053f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e062      	b.n	8004008 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f48:	f107 0310 	add.w	r3, r7, #16
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fe9b 	bl	8004c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f56:	f001 fa4f 	bl	80053f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f5a:	f000 fc3f 	bl	80047dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f5e:	f001 fa15 	bl	800538c <vPortEnterCritical>
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d103      	bne.n	8003f78 <xQueueReceive+0x134>
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d103      	bne.n	8003f8e <xQueueReceive+0x14a>
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f8e:	f001 fa33 	bl	80053f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f92:	1d3a      	adds	r2, r7, #4
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fe8a 	bl	8004cb4 <xTaskCheckForTimeOut>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d123      	bne.n	8003fee <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fa8:	f000 f916 	bl	80041d8 <prvIsQueueEmpty>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d017      	beq.n	8003fe2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	3324      	adds	r3, #36	@ 0x24
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fdd6 	bl	8004b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc2:	f000 f8b7 	bl	8004134 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fc6:	f000 fc17 	bl	80047f8 <xTaskResumeAll>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d189      	bne.n	8003ee4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <xQueueReceive+0x1cc>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	e780      	b.n	8003ee4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe4:	f000 f8a6 	bl	8004134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe8:	f000 fc06 	bl	80047f8 <xTaskResumeAll>
 8003fec:	e77a      	b.n	8003ee4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff0:	f000 f8a0 	bl	8004134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff4:	f000 fc00 	bl	80047f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ffa:	f000 f8ed 	bl	80041d8 <prvIsQueueEmpty>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	f43f af6f 	beq.w	8003ee4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004008:	4618      	mov	r0, r3
 800400a:	3730      	adds	r7, #48	@ 0x30
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d14d      	bne.n	80040d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ffa2 	bl	8004f88 <xTaskPriorityDisinherit>
 8004044:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	e043      	b.n	80040d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d119      	bne.n	8004088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6858      	ldr	r0, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	f001 feeb 	bl	8005e3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	d32b      	bcc.n	80040d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e026      	b.n	80040d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68d8      	ldr	r0, [r3, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	461a      	mov	r2, r3
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	f001 fed1 	bl	8005e3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	425b      	negs	r3, r3
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d207      	bcs.n	80040c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	425b      	negs	r3, r3
 80040be:	441a      	add	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d105      	bne.n	80040d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040de:	697b      	ldr	r3, [r7, #20]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d303      	bcc.n	800411c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68d9      	ldr	r1, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	461a      	mov	r2, r3
 8004126:	6838      	ldr	r0, [r7, #0]
 8004128:	f001 fe87 	bl	8005e3a <memcpy>
	}
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800413c:	f001 f926 	bl	800538c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004146:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004148:	e011      	b.n	800416e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3324      	adds	r3, #36	@ 0x24
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fd30 	bl	8004bbc <xTaskRemoveFromEventList>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004162:	f000 fe0f 	bl	8004d84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3b01      	subs	r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	dce9      	bgt.n	800414a <prvUnlockQueue+0x16>
 8004176:	e000      	b.n	800417a <prvUnlockQueue+0x46>
					break;
 8004178:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	22ff      	movs	r2, #255	@ 0xff
 800417e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004182:	f001 f939 	bl	80053f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004186:	f001 f901 	bl	800538c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004190:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004192:	e011      	b.n	80041b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3310      	adds	r3, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fd0b 	bl	8004bbc <xTaskRemoveFromEventList>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041ac:	f000 fdea 	bl	8004d84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b0:	7bbb      	ldrb	r3, [r7, #14]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	dce9      	bgt.n	8004194 <prvUnlockQueue+0x60>
 80041c0:	e000      	b.n	80041c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	22ff      	movs	r2, #255	@ 0xff
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041cc:	f001 f914 	bl	80053f8 <vPortExitCritical>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e0:	f001 f8d4 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e001      	b.n	80041f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041f6:	f001 f8ff 	bl	80053f8 <vPortExitCritical>

	return xReturn;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800420c:	f001 f8be 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	429a      	cmp	r2, r3
 800421a:	d102      	bne.n	8004222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e001      	b.n	8004226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004226:	f001 f8e7 	bl	80053f8 <vPortExitCritical>

	return xReturn;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08e      	sub	sp, #56	@ 0x38
 8004238:	af04      	add	r7, sp, #16
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10d      	bne.n	8004264 <xTaskCreateStatic+0x30>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	b672      	cpsid	i
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	b662      	cpsie	i
 800425c:	623b      	str	r3, [r7, #32]
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <xTaskCreateStatic+0x52>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426e:	b672      	cpsid	i
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	b662      	cpsie	i
 800427e:	61fb      	str	r3, [r7, #28]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004286:	2354      	movs	r3, #84	@ 0x54
 8004288:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b54      	cmp	r3, #84	@ 0x54
 800428e:	d00d      	beq.n	80042ac <xTaskCreateStatic+0x78>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	b672      	cpsid	i
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	b662      	cpsie	i
 80042a4:	61bb      	str	r3, [r7, #24]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01e      	beq.n	80042f2 <xTaskCreateStatic+0xbe>
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01b      	beq.n	80042f2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042cc:	2300      	movs	r3, #0
 80042ce:	9303      	str	r3, [sp, #12]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	9302      	str	r3, [sp, #8]
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f850 	bl	800438a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042ec:	f000 f8d8 	bl	80044a0 <prvAddNewTaskToReadyList>
 80042f0:	e001      	b.n	80042f6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f6:	697b      	ldr	r3, [r7, #20]
	}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3728      	adds	r7, #40	@ 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	@ 0x30
 8004304:	af04      	add	r7, sp, #16
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f001 f921 	bl	800555c <pvPortMalloc>
 800431a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00e      	beq.n	8004340 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004322:	2054      	movs	r0, #84	@ 0x54
 8004324:	f001 f91a 	bl	800555c <pvPortMalloc>
 8004328:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30
 8004336:	e005      	b.n	8004344 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004338:	6978      	ldr	r0, [r7, #20]
 800433a:	f001 f9dd 	bl	80056f8 <vPortFree>
 800433e:	e001      	b.n	8004344 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d017      	beq.n	800437a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	2300      	movs	r3, #0
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	9302      	str	r3, [sp, #8]
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f80e 	bl	800438a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436e:	69f8      	ldr	r0, [r7, #28]
 8004370:	f000 f896 	bl	80044a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004374:	2301      	movs	r3, #1
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e002      	b.n	8004380 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004380:	69bb      	ldr	r3, [r7, #24]
	}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b088      	sub	sp, #32
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80043a2:	440b      	add	r3, r1
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f023 0307 	bic.w	r3, r3, #7
 80043b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	b672      	cpsid	i
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	b662      	cpsie	i
 80043d0:	617b      	str	r3, [r7, #20]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01f      	beq.n	800441e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e012      	b.n	800440a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	7819      	ldrb	r1, [r3, #0]
 80043ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	3334      	adds	r3, #52	@ 0x34
 80043f4:	460a      	mov	r2, r1
 80043f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d9e9      	bls.n	80043e4 <prvInitialiseNewTask+0x5a>
 8004410:	e000      	b.n	8004414 <prvInitialiseNewTask+0x8a>
			{
				break;
 8004412:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	e003      	b.n	8004426 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004428:	2b06      	cmp	r3, #6
 800442a:	d901      	bls.n	8004430 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800442c:	2306      	movs	r3, #6
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004434:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800443a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	2200      	movs	r2, #0
 8004440:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	3304      	adds	r3, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fa8f 	bl	800396a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	3318      	adds	r3, #24
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fa8a 	bl	800396a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	f1c3 0207 	rsb	r2, r3, #7
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800446a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	2200      	movs	r2, #0
 8004470:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	69b8      	ldr	r0, [r7, #24]
 8004480:	f000 fe74 	bl	800516c <pxPortInitialiseStack>
 8004484:	4602      	mov	r2, r0
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044a8:	f000 ff70 	bl	800538c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <prvAddNewTaskToReadyList+0xb8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	4a29      	ldr	r2, [pc, #164]	@ (8004558 <prvAddNewTaskToReadyList+0xb8>)
 80044b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044b6:	4b29      	ldr	r3, [pc, #164]	@ (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044be:	4a27      	ldr	r2, [pc, #156]	@ (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044c4:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <prvAddNewTaskToReadyList+0xb8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d110      	bne.n	80044ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044cc:	f000 fc7e 	bl	8004dcc <prvInitialiseTaskLists>
 80044d0:	e00d      	b.n	80044ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044d2:	4b23      	ldr	r3, [pc, #140]	@ (8004560 <prvAddNewTaskToReadyList+0xc0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044da:	4b20      	ldr	r3, [pc, #128]	@ (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d802      	bhi.n	80044ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044e8:	4a1c      	ldr	r2, [pc, #112]	@ (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <prvAddNewTaskToReadyList+0xc4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <prvAddNewTaskToReadyList+0xc4>)
 80044f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	2201      	movs	r2, #1
 80044fe:	409a      	lsls	r2, r3
 8004500:	4b19      	ldr	r3, [pc, #100]	@ (8004568 <prvAddNewTaskToReadyList+0xc8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	4a18      	ldr	r2, [pc, #96]	@ (8004568 <prvAddNewTaskToReadyList+0xc8>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a15      	ldr	r2, [pc, #84]	@ (800456c <prvAddNewTaskToReadyList+0xcc>)
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7ff fa2f 	bl	8003984 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004526:	f000 ff67 	bl	80053f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800452a:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <prvAddNewTaskToReadyList+0xc0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <prvAddNewTaskToReadyList+0xbc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	429a      	cmp	r2, r3
 800453e:	d207      	bcs.n	8004550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <prvAddNewTaskToReadyList+0xd0>)
 8004542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000480 	.word	0x20000480
 800455c:	20000380 	.word	0x20000380
 8004560:	2000048c 	.word	0x2000048c
 8004564:	2000049c 	.word	0x2000049c
 8004568:	20000488 	.word	0x20000488
 800456c:	20000384 	.word	0x20000384
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01a      	beq.n	80045bc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004586:	4b15      	ldr	r3, [pc, #84]	@ (80045dc <vTaskDelay+0x68>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <vTaskDelay+0x36>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	b672      	cpsid	i
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	b662      	cpsie	i
 80045a2:	60bb      	str	r3, [r7, #8]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80045aa:	f000 f917 	bl	80047dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045ae:	2100      	movs	r1, #0
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fd75 	bl	80050a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b6:	f000 f91f 	bl	80047f8 <xTaskResumeAll>
 80045ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80045c2:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <vTaskDelay+0x6c>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200004a8 	.word	0x200004a8
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80045ec:	f000 fece 	bl	800538c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <vTaskSuspend+0x18>
 80045f6:	4b3e      	ldr	r3, [pc, #248]	@ (80046f0 <vTaskSuspend+0x10c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	e000      	b.n	80045fe <vTaskSuspend+0x1a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fa1a 	bl	8003a3e <uxListRemove>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d115      	bne.n	800463c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004614:	4937      	ldr	r1, [pc, #220]	@ (80046f4 <vTaskSuspend+0x110>)
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <vTaskSuspend+0x58>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	2201      	movs	r2, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43da      	mvns	r2, r3
 8004632:	4b31      	ldr	r3, [pc, #196]	@ (80046f8 <vTaskSuspend+0x114>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4013      	ands	r3, r2
 8004638:	4a2f      	ldr	r2, [pc, #188]	@ (80046f8 <vTaskSuspend+0x114>)
 800463a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3318      	adds	r3, #24
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff f9f8 	bl	8003a3e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4829      	ldr	r0, [pc, #164]	@ (80046fc <vTaskSuspend+0x118>)
 8004656:	f7ff f995 	bl	8003984 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d103      	bne.n	800466e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800466e:	f000 fec3 	bl	80053f8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004672:	4b23      	ldr	r3, [pc, #140]	@ (8004700 <vTaskSuspend+0x11c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800467a:	f000 fe87 	bl	800538c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800467e:	f000 fc45 	bl	8004f0c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004682:	f000 feb9 	bl	80053f8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004686:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <vTaskSuspend+0x10c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	429a      	cmp	r2, r3
 800468e:	d12a      	bne.n	80046e6 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <vTaskSuspend+0x11c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004698:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <vTaskSuspend+0x120>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <vTaskSuspend+0xd8>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	b672      	cpsid	i
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	b662      	cpsie	i
 80046b4:	60bb      	str	r3, [r7, #8]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 80046bc:	4b12      	ldr	r3, [pc, #72]	@ (8004708 <vTaskSuspend+0x124>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046cc:	e00b      	b.n	80046e6 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80046ce:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <vTaskSuspend+0x118>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <vTaskSuspend+0x128>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d103      	bne.n	80046e2 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <vTaskSuspend+0x10c>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
	}
 80046e0:	e001      	b.n	80046e6 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 80046e2:	f000 f9e5 	bl	8004ab0 <vTaskSwitchContext>
	}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000380 	.word	0x20000380
 80046f4:	20000384 	.word	0x20000384
 80046f8:	20000488 	.word	0x20000488
 80046fc:	2000046c 	.word	0x2000046c
 8004700:	2000048c 	.word	0x2000048c
 8004704:	200004a8 	.word	0x200004a8
 8004708:	e000ed04 	.word	0xe000ed04
 800470c:	20000480 	.word	0x20000480

08004710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800471e:	463a      	mov	r2, r7
 8004720:	1d39      	adds	r1, r7, #4
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb ff58 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	9202      	str	r2, [sp, #8]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	2300      	movs	r3, #0
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	460a      	mov	r2, r1
 800473e:	4921      	ldr	r1, [pc, #132]	@ (80047c4 <vTaskStartScheduler+0xb4>)
 8004740:	4821      	ldr	r0, [pc, #132]	@ (80047c8 <vTaskStartScheduler+0xb8>)
 8004742:	f7ff fd77 	bl	8004234 <xTaskCreateStatic>
 8004746:	4603      	mov	r3, r0
 8004748:	4a20      	ldr	r2, [pc, #128]	@ (80047cc <vTaskStartScheduler+0xbc>)
 800474a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800474c:	4b1f      	ldr	r3, [pc, #124]	@ (80047cc <vTaskStartScheduler+0xbc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e001      	b.n	800475e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d118      	bne.n	8004796 <vTaskStartScheduler+0x86>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	b672      	cpsid	i
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	b662      	cpsie	i
 8004778:	613b      	str	r3, [r7, #16]
}
 800477a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800477c:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <vTaskStartScheduler+0xc0>)
 800477e:	f04f 32ff 	mov.w	r2, #4294967295
 8004782:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <vTaskStartScheduler+0xc4>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800478a:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <vTaskStartScheduler+0xc8>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004790:	f000 fd7e 	bl	8005290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004794:	e011      	b.n	80047ba <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d10d      	bne.n	80047ba <vTaskStartScheduler+0xaa>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	b672      	cpsid	i
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	b662      	cpsie	i
 80047b2:	60fb      	str	r3, [r7, #12]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <vTaskStartScheduler+0xa6>
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	08006a40 	.word	0x08006a40
 80047c8:	08004d9d 	.word	0x08004d9d
 80047cc:	200004a4 	.word	0x200004a4
 80047d0:	200004a0 	.word	0x200004a0
 80047d4:	2000048c 	.word	0x2000048c
 80047d8:	20000484 	.word	0x20000484

080047dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047e0:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <vTaskSuspendAll+0x18>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a03      	ldr	r2, [pc, #12]	@ (80047f4 <vTaskSuspendAll+0x18>)
 80047e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	200004a8 	.word	0x200004a8

080047f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004806:	4b43      	ldr	r3, [pc, #268]	@ (8004914 <xTaskResumeAll+0x11c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <xTaskResumeAll+0x32>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	b672      	cpsid	i
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	b662      	cpsie	i
 8004822:	603b      	str	r3, [r7, #0]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800482a:	f000 fdaf 	bl	800538c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800482e:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <xTaskResumeAll+0x11c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3b01      	subs	r3, #1
 8004834:	4a37      	ldr	r2, [pc, #220]	@ (8004914 <xTaskResumeAll+0x11c>)
 8004836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004838:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <xTaskResumeAll+0x11c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d161      	bne.n	8004904 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004840:	4b35      	ldr	r3, [pc, #212]	@ (8004918 <xTaskResumeAll+0x120>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d05d      	beq.n	8004904 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004848:	e02e      	b.n	80048a8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484a:	4b34      	ldr	r3, [pc, #208]	@ (800491c <xTaskResumeAll+0x124>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3318      	adds	r3, #24
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f8f1 	bl	8003a3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3304      	adds	r3, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff f8ec 	bl	8003a3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	2201      	movs	r2, #1
 800486c:	409a      	lsls	r2, r3
 800486e:	4b2c      	ldr	r3, [pc, #176]	@ (8004920 <xTaskResumeAll+0x128>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <xTaskResumeAll+0x128>)
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a27      	ldr	r2, [pc, #156]	@ (8004924 <xTaskResumeAll+0x12c>)
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f7ff f878 	bl	8003984 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004898:	4b23      	ldr	r3, [pc, #140]	@ (8004928 <xTaskResumeAll+0x130>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80048a2:	4b22      	ldr	r3, [pc, #136]	@ (800492c <xTaskResumeAll+0x134>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048a8:	4b1c      	ldr	r3, [pc, #112]	@ (800491c <xTaskResumeAll+0x124>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1cc      	bne.n	800484a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048b6:	f000 fb29 	bl	8004f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <xTaskResumeAll+0x138>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048c6:	f000 f837 	bl	8004938 <xTaskIncrementTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80048d0:	4b16      	ldr	r3, [pc, #88]	@ (800492c <xTaskResumeAll+0x134>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3b01      	subs	r3, #1
 80048da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f1      	bne.n	80048c6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80048e2:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <xTaskResumeAll+0x138>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048e8:	4b10      	ldr	r3, [pc, #64]	@ (800492c <xTaskResumeAll+0x134>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <xTaskResumeAll+0x13c>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004904:	f000 fd78 	bl	80053f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004908:	68bb      	ldr	r3, [r7, #8]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200004a8 	.word	0x200004a8
 8004918:	20000480 	.word	0x20000480
 800491c:	20000440 	.word	0x20000440
 8004920:	20000488 	.word	0x20000488
 8004924:	20000384 	.word	0x20000384
 8004928:	20000380 	.word	0x20000380
 800492c:	20000494 	.word	0x20000494
 8004930:	20000490 	.word	0x20000490
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004942:	4b50      	ldr	r3, [pc, #320]	@ (8004a84 <xTaskIncrementTick+0x14c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 808b 	bne.w	8004a62 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800494c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a88 <xTaskIncrementTick+0x150>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004954:	4a4c      	ldr	r2, [pc, #304]	@ (8004a88 <xTaskIncrementTick+0x150>)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d123      	bne.n	80049a8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004960:	4b4a      	ldr	r3, [pc, #296]	@ (8004a8c <xTaskIncrementTick+0x154>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <xTaskIncrementTick+0x4e>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	b672      	cpsid	i
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	b662      	cpsie	i
 800497e:	603b      	str	r3, [r7, #0]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <xTaskIncrementTick+0x4a>
 8004986:	4b41      	ldr	r3, [pc, #260]	@ (8004a8c <xTaskIncrementTick+0x154>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	4b40      	ldr	r3, [pc, #256]	@ (8004a90 <xTaskIncrementTick+0x158>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3e      	ldr	r2, [pc, #248]	@ (8004a8c <xTaskIncrementTick+0x154>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4a3e      	ldr	r2, [pc, #248]	@ (8004a90 <xTaskIncrementTick+0x158>)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a94 <xTaskIncrementTick+0x15c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004a94 <xTaskIncrementTick+0x15c>)
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	f000 fab2 	bl	8004f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004a98 <xTaskIncrementTick+0x160>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d348      	bcc.n	8004a44 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b2:	4b36      	ldr	r3, [pc, #216]	@ (8004a8c <xTaskIncrementTick+0x154>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049bc:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <xTaskIncrementTick+0x160>)
 80049be:	f04f 32ff 	mov.w	r2, #4294967295
 80049c2:	601a      	str	r2, [r3, #0]
					break;
 80049c4:	e03e      	b.n	8004a44 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c6:	4b31      	ldr	r3, [pc, #196]	@ (8004a8c <xTaskIncrementTick+0x154>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d203      	bcs.n	80049e6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049de:	4a2e      	ldr	r2, [pc, #184]	@ (8004a98 <xTaskIncrementTick+0x160>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049e4:	e02e      	b.n	8004a44 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff f827 	bl	8003a3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	3318      	adds	r3, #24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f81e 	bl	8003a3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	2201      	movs	r2, #1
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <xTaskIncrementTick+0x164>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <xTaskIncrementTick+0x164>)
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa0 <xTaskIncrementTick+0x168>)
 8004a22:	441a      	add	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7fe ffaa 	bl	8003984 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <xTaskIncrementTick+0x16c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3b9      	bcc.n	80049b2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a42:	e7b6      	b.n	80049b2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a44:	4b17      	ldr	r3, [pc, #92]	@ (8004aa4 <xTaskIncrementTick+0x16c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	4915      	ldr	r1, [pc, #84]	@ (8004aa0 <xTaskIncrementTick+0x168>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d907      	bls.n	8004a6c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e004      	b.n	8004a6c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <xTaskIncrementTick+0x170>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4a0f      	ldr	r2, [pc, #60]	@ (8004aa8 <xTaskIncrementTick+0x170>)
 8004a6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <xTaskIncrementTick+0x174>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a78:	697b      	ldr	r3, [r7, #20]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200004a8 	.word	0x200004a8
 8004a88:	20000484 	.word	0x20000484
 8004a8c:	20000438 	.word	0x20000438
 8004a90:	2000043c 	.word	0x2000043c
 8004a94:	20000498 	.word	0x20000498
 8004a98:	200004a0 	.word	0x200004a0
 8004a9c:	20000488 	.word	0x20000488
 8004aa0:	20000384 	.word	0x20000384
 8004aa4:	20000380 	.word	0x20000380
 8004aa8:	20000490 	.word	0x20000490
 8004aac:	20000494 	.word	0x20000494

08004ab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ab6:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <vTaskSwitchContext+0xa8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004abe:	4b27      	ldr	r3, [pc, #156]	@ (8004b5c <vTaskSwitchContext+0xac>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ac4:	e042      	b.n	8004b4c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <vTaskSwitchContext+0xac>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004acc:	4b24      	ldr	r3, [pc, #144]	@ (8004b60 <vTaskSwitchContext+0xb0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	f1c3 031f 	rsb	r3, r3, #31
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	4920      	ldr	r1, [pc, #128]	@ (8004b64 <vTaskSwitchContext+0xb4>)
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <vTaskSwitchContext+0x62>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afa:	b672      	cpsid	i
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	b662      	cpsie	i
 8004b0a:	607b      	str	r3, [r7, #4]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <vTaskSwitchContext+0x5e>
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4a11      	ldr	r2, [pc, #68]	@ (8004b64 <vTaskSwitchContext+0xb4>)
 8004b1e:	4413      	add	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3308      	adds	r3, #8
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d104      	bne.n	8004b42 <vTaskSwitchContext+0x92>
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a07      	ldr	r2, [pc, #28]	@ (8004b68 <vTaskSwitchContext+0xb8>)
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	200004a8 	.word	0x200004a8
 8004b5c:	20000494 	.word	0x20000494
 8004b60:	20000488 	.word	0x20000488
 8004b64:	20000384 	.word	0x20000384
 8004b68:	20000380 	.word	0x20000380

08004b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b80:	b672      	cpsid	i
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	b662      	cpsie	i
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b98:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <vTaskPlaceOnEventList+0x4c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fe ff13 	bl	80039cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	6838      	ldr	r0, [r7, #0]
 8004baa:	f000 fa79 	bl	80050a0 <prvAddCurrentTaskToDelayedList>
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000380 	.word	0x20000380

08004bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	b672      	cpsid	i
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	b662      	cpsie	i
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe ff23 	bl	8003a3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <xTaskRemoveFromEventList+0xb4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11c      	bne.n	8004c3a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe ff1a 	bl	8003a3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	2201      	movs	r2, #1
 8004c10:	409a      	lsls	r2, r3
 8004c12:	4b18      	ldr	r3, [pc, #96]	@ (8004c74 <xTaskRemoveFromEventList+0xb8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	4a16      	ldr	r2, [pc, #88]	@ (8004c74 <xTaskRemoveFromEventList+0xb8>)
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <xTaskRemoveFromEventList+0xbc>)
 8004c2a:	441a      	add	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fe fea6 	bl	8003984 <vListInsertEnd>
 8004c38:	e005      	b.n	8004c46 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3318      	adds	r3, #24
 8004c3e:	4619      	mov	r1, r3
 8004c40:	480e      	ldr	r0, [pc, #56]	@ (8004c7c <xTaskRemoveFromEventList+0xc0>)
 8004c42:	f7fe fe9f 	bl	8003984 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <xTaskRemoveFromEventList+0xc4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d905      	bls.n	8004c60 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <xTaskRemoveFromEventList+0xc8>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e001      	b.n	8004c64 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200004a8 	.word	0x200004a8
 8004c74:	20000488 	.word	0x20000488
 8004c78:	20000384 	.word	0x20000384
 8004c7c:	20000440 	.word	0x20000440
 8004c80:	20000380 	.word	0x20000380
 8004c84:	20000494 	.word	0x20000494

08004c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <vTaskInternalSetTimeOutState+0x24>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <vTaskInternalSetTimeOutState+0x28>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	605a      	str	r2, [r3, #4]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000498 	.word	0x20000498
 8004cb0:	20000484 	.word	0x20000484

08004cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	b672      	cpsid	i
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	b662      	cpsie	i
 8004cd8:	613b      	str	r3, [r7, #16]
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	b672      	cpsid	i
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	b662      	cpsie	i
 8004cfa:	60fb      	str	r3, [r7, #12]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004d02:	f000 fb43 	bl	800538c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d06:	4b1d      	ldr	r3, [pc, #116]	@ (8004d7c <xTaskCheckForTimeOut+0xc8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d102      	bne.n	8004d26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	e023      	b.n	8004d6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b15      	ldr	r3, [pc, #84]	@ (8004d80 <xTaskCheckForTimeOut+0xcc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d007      	beq.n	8004d42 <xTaskCheckForTimeOut+0x8e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e015      	b.n	8004d6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d20b      	bcs.n	8004d64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ff95 	bl	8004c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e004      	b.n	8004d6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d6e:	f000 fb43 	bl	80053f8 <vPortExitCritical>

	return xReturn;
 8004d72:	69fb      	ldr	r3, [r7, #28]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000484 	.word	0x20000484
 8004d80:	20000498 	.word	0x20000498

08004d84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d88:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <vTaskMissedYield+0x14>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000494 	.word	0x20000494

08004d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004da4:	f000 f852 	bl	8004e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <prvIdleTask+0x28>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d9f9      	bls.n	8004da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004db0:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <prvIdleTask+0x2c>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dc0:	e7f0      	b.n	8004da4 <prvIdleTask+0x8>
 8004dc2:	bf00      	nop
 8004dc4:	20000384 	.word	0x20000384
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	e00c      	b.n	8004df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4a12      	ldr	r2, [pc, #72]	@ (8004e2c <prvInitialiseTaskLists+0x60>)
 8004de4:	4413      	add	r3, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fd9f 	bl	800392a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3301      	adds	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d9ef      	bls.n	8004dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df8:	480d      	ldr	r0, [pc, #52]	@ (8004e30 <prvInitialiseTaskLists+0x64>)
 8004dfa:	f7fe fd96 	bl	800392a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dfe:	480d      	ldr	r0, [pc, #52]	@ (8004e34 <prvInitialiseTaskLists+0x68>)
 8004e00:	f7fe fd93 	bl	800392a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e04:	480c      	ldr	r0, [pc, #48]	@ (8004e38 <prvInitialiseTaskLists+0x6c>)
 8004e06:	f7fe fd90 	bl	800392a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e0a:	480c      	ldr	r0, [pc, #48]	@ (8004e3c <prvInitialiseTaskLists+0x70>)
 8004e0c:	f7fe fd8d 	bl	800392a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e10:	480b      	ldr	r0, [pc, #44]	@ (8004e40 <prvInitialiseTaskLists+0x74>)
 8004e12:	f7fe fd8a 	bl	800392a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <prvInitialiseTaskLists+0x78>)
 8004e18:	4a05      	ldr	r2, [pc, #20]	@ (8004e30 <prvInitialiseTaskLists+0x64>)
 8004e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <prvInitialiseTaskLists+0x7c>)
 8004e1e:	4a05      	ldr	r2, [pc, #20]	@ (8004e34 <prvInitialiseTaskLists+0x68>)
 8004e20:	601a      	str	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000384 	.word	0x20000384
 8004e30:	20000410 	.word	0x20000410
 8004e34:	20000424 	.word	0x20000424
 8004e38:	20000440 	.word	0x20000440
 8004e3c:	20000454 	.word	0x20000454
 8004e40:	2000046c 	.word	0x2000046c
 8004e44:	20000438 	.word	0x20000438
 8004e48:	2000043c 	.word	0x2000043c

08004e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e52:	e019      	b.n	8004e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e54:	f000 fa9a 	bl	800538c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e58:	4b10      	ldr	r3, [pc, #64]	@ (8004e9c <prvCheckTasksWaitingTermination+0x50>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fdea 	bl	8003a3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <prvCheckTasksWaitingTermination+0x54>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea0 <prvCheckTasksWaitingTermination+0x54>)
 8004e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <prvCheckTasksWaitingTermination+0x58>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <prvCheckTasksWaitingTermination+0x58>)
 8004e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e7e:	f000 fabb 	bl	80053f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f810 	bl	8004ea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <prvCheckTasksWaitingTermination+0x58>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e1      	bne.n	8004e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000454 	.word	0x20000454
 8004ea0:	20000480 	.word	0x20000480
 8004ea4:	20000468 	.word	0x20000468

08004ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fc1a 	bl	80056f8 <vPortFree>
				vPortFree( pxTCB );
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fc17 	bl	80056f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eca:	e01b      	b.n	8004f04 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d103      	bne.n	8004ede <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fc0e 	bl	80056f8 <vPortFree>
	}
 8004edc:	e012      	b.n	8004f04 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d00d      	beq.n	8004f04 <prvDeleteTCB+0x5c>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eec:	b672      	cpsid	i
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	b662      	cpsie	i
 8004efc:	60fb      	str	r3, [r7, #12]
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <prvDeleteTCB+0x58>
	}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f12:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <prvResetNextTaskUnblockTime+0x38>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <prvResetNextTaskUnblockTime+0x3c>)
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f24:	e008      	b.n	8004f38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <prvResetNextTaskUnblockTime+0x38>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a04      	ldr	r2, [pc, #16]	@ (8004f48 <prvResetNextTaskUnblockTime+0x3c>)
 8004f36:	6013      	str	r3, [r2, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	20000438 	.word	0x20000438
 8004f48:	200004a0 	.word	0x200004a0

08004f4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f52:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <xTaskGetSchedulerState+0x34>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	e008      	b.n	8004f72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f60:	4b08      	ldr	r3, [pc, #32]	@ (8004f84 <xTaskGetSchedulerState+0x38>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	e001      	b.n	8004f72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f72:	687b      	ldr	r3, [r7, #4]
	}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	2000048c 	.word	0x2000048c
 8004f84:	200004a8 	.word	0x200004a8

08004f88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d074      	beq.n	8005088 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005094 <xTaskPriorityDisinherit+0x10c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d00d      	beq.n	8004fc4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	b672      	cpsid	i
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	b662      	cpsie	i
 8004fbc:	60fb      	str	r3, [r7, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10d      	bne.n	8004fe8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	b672      	cpsid	i
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	b662      	cpsie	i
 8004fe0:	60bb      	str	r3, [r7, #8]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d044      	beq.n	8005088 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005002:	2b00      	cmp	r3, #0
 8005004:	d140      	bne.n	8005088 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3304      	adds	r3, #4
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fd17 	bl	8003a3e <uxListRemove>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d115      	bne.n	8005042 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501a:	491f      	ldr	r1, [pc, #124]	@ (8005098 <xTaskPriorityDisinherit+0x110>)
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xTaskPriorityDisinherit+0xba>
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	2201      	movs	r2, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43da      	mvns	r2, r3
 8005038:	4b18      	ldr	r3, [pc, #96]	@ (800509c <xTaskPriorityDisinherit+0x114>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4013      	ands	r3, r2
 800503e:	4a17      	ldr	r2, [pc, #92]	@ (800509c <xTaskPriorityDisinherit+0x114>)
 8005040:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	f1c3 0207 	rsb	r2, r3, #7
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <xTaskPriorityDisinherit+0x114>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	4a0d      	ldr	r2, [pc, #52]	@ (800509c <xTaskPriorityDisinherit+0x114>)
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <xTaskPriorityDisinherit+0x110>)
 8005076:	441a      	add	r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fe fc80 	bl	8003984 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005088:	697b      	ldr	r3, [r7, #20]
	}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000380 	.word	0x20000380
 8005098:	20000384 	.word	0x20000384
 800509c:	20000488 	.word	0x20000488

080050a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050aa:	4b29      	ldr	r3, [pc, #164]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b0:	4b28      	ldr	r3, [pc, #160]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fcc1 	bl	8003a3e <uxListRemove>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050c2:	4b24      	ldr	r3, [pc, #144]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	2201      	movs	r2, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43da      	mvns	r2, r3
 80050d0:	4b21      	ldr	r3, [pc, #132]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4013      	ands	r3, r2
 80050d6:	4a20      	ldr	r2, [pc, #128]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d10a      	bne.n	80050f8 <prvAddCurrentTaskToDelayedList+0x58>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	481a      	ldr	r0, [pc, #104]	@ (800515c <prvAddCurrentTaskToDelayedList+0xbc>)
 80050f2:	f7fe fc47 	bl	8003984 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050f6:	e026      	b.n	8005146 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005100:	4b14      	ldr	r3, [pc, #80]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	429a      	cmp	r2, r3
 800510e:	d209      	bcs.n	8005124 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005110:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fe fc55 	bl	80039cc <vListInsert>
}
 8005122:	e010      	b.n	8005146 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005124:	4b0f      	ldr	r3, [pc, #60]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fe fc4b 	bl	80039cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005136:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d202      	bcs.n	8005146 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005140:	4a09      	ldr	r2, [pc, #36]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6013      	str	r3, [r2, #0]
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000484 	.word	0x20000484
 8005154:	20000380 	.word	0x20000380
 8005158:	20000488 	.word	0x20000488
 800515c:	2000046c 	.word	0x2000046c
 8005160:	2000043c 	.word	0x2000043c
 8005164:	20000438 	.word	0x20000438
 8005168:	200004a0 	.word	0x200004a0

0800516c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b04      	subs	r3, #4
 800517c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3b04      	subs	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f023 0201 	bic.w	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3b04      	subs	r3, #4
 800519a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800519c:	4a0c      	ldr	r2, [pc, #48]	@ (80051d0 <pxPortInitialiseStack+0x64>)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b14      	subs	r3, #20
 80051a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3b04      	subs	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f06f 0202 	mvn.w	r2, #2
 80051ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b20      	subs	r3, #32
 80051c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051c2:	68fb      	ldr	r3, [r7, #12]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	080051d5 	.word	0x080051d5

080051d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051de:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <prvTaskExitError+0x60>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d00d      	beq.n	8005204 <prvTaskExitError+0x30>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	b672      	cpsid	i
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	b662      	cpsie	i
 80051fc:	60fb      	str	r3, [r7, #12]
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <prvTaskExitError+0x2c>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	b672      	cpsid	i
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	b662      	cpsie	i
 8005218:	60bb      	str	r3, [r7, #8]
}
 800521a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800521c:	bf00      	nop
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0fc      	beq.n	800521e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
	...

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	4770      	bx	lr
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst2>:
 8005260:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005268:	4808      	ldr	r0, [pc, #32]	@ (800528c <prvPortStartFirstTask+0x24>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8814 	msr	CONTROL, r0
 800527a:	b662      	cpsie	i
 800527c:	b661      	cpsie	f
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	df00      	svc	0
 8005288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800528a:	bf00      	nop
 800528c:	e000ed08 	.word	0xe000ed08

08005290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005296:	4b37      	ldr	r3, [pc, #220]	@ (8005374 <xPortStartScheduler+0xe4>)
 8005298:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	22ff      	movs	r2, #255	@ 0xff
 80052a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005378 <xPortStartScheduler+0xe8>)
 80052bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052be:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <xPortStartScheduler+0xec>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052c4:	e009      	b.n	80052da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052c6:	4b2d      	ldr	r3, [pc, #180]	@ (800537c <xPortStartScheduler+0xec>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	4a2b      	ldr	r2, [pc, #172]	@ (800537c <xPortStartScheduler+0xec>)
 80052ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e2:	2b80      	cmp	r3, #128	@ 0x80
 80052e4:	d0ef      	beq.n	80052c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052e6:	4b25      	ldr	r3, [pc, #148]	@ (800537c <xPortStartScheduler+0xec>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1c3 0307 	rsb	r3, r3, #7
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00d      	beq.n	800530e <xPortStartScheduler+0x7e>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	b672      	cpsid	i
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	b662      	cpsie	i
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800530e:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <xPortStartScheduler+0xec>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	4a19      	ldr	r2, [pc, #100]	@ (800537c <xPortStartScheduler+0xec>)
 8005316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005318:	4b18      	ldr	r3, [pc, #96]	@ (800537c <xPortStartScheduler+0xec>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005320:	4a16      	ldr	r2, [pc, #88]	@ (800537c <xPortStartScheduler+0xec>)
 8005322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800532c:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <xPortStartScheduler+0xf0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a13      	ldr	r2, [pc, #76]	@ (8005380 <xPortStartScheduler+0xf0>)
 8005332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005338:	4b11      	ldr	r3, [pc, #68]	@ (8005380 <xPortStartScheduler+0xf0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a10      	ldr	r2, [pc, #64]	@ (8005380 <xPortStartScheduler+0xf0>)
 800533e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005344:	f000 f8dc 	bl	8005500 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005348:	4b0e      	ldr	r3, [pc, #56]	@ (8005384 <xPortStartScheduler+0xf4>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800534e:	f000 f8fb 	bl	8005548 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <xPortStartScheduler+0xf8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a0c      	ldr	r2, [pc, #48]	@ (8005388 <xPortStartScheduler+0xf8>)
 8005358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800535c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800535e:	f7ff ff83 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005362:	f7ff fba5 	bl	8004ab0 <vTaskSwitchContext>
	prvTaskExitError();
 8005366:	f7ff ff35 	bl	80051d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	e000e400 	.word	0xe000e400
 8005378:	200004ac 	.word	0x200004ac
 800537c:	200004b0 	.word	0x200004b0
 8005380:	e000ed20 	.word	0xe000ed20
 8005384:	2000000c 	.word	0x2000000c
 8005388:	e000ef34 	.word	0xe000ef34

0800538c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	b672      	cpsid	i
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	b662      	cpsie	i
 80053a6:	607b      	str	r3, [r7, #4]
}
 80053a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053aa:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <vPortEnterCritical+0x64>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	4a0f      	ldr	r2, [pc, #60]	@ (80053f0 <vPortEnterCritical+0x64>)
 80053b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053b4:	4b0e      	ldr	r3, [pc, #56]	@ (80053f0 <vPortEnterCritical+0x64>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d112      	bne.n	80053e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053bc:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <vPortEnterCritical+0x68>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <vPortEnterCritical+0x56>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	b672      	cpsid	i
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	b662      	cpsie	i
 80053da:	603b      	str	r3, [r7, #0]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <vPortEnterCritical+0x52>
	}
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053fe:	4b13      	ldr	r3, [pc, #76]	@ (800544c <vPortExitCritical+0x54>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <vPortExitCritical+0x2a>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	b672      	cpsid	i
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	b662      	cpsie	i
 800541a:	607b      	str	r3, [r7, #4]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <vPortExitCritical+0x54>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3b01      	subs	r3, #1
 8005428:	4a08      	ldr	r2, [pc, #32]	@ (800544c <vPortExitCritical+0x54>)
 800542a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <vPortExitCritical+0x54>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <vPortExitCritical+0x48>
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800543e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	2000000c 	.word	0x2000000c

08005450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005450:	f3ef 8009 	mrs	r0, PSP
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4b15      	ldr	r3, [pc, #84]	@ (80054b0 <pxCurrentTCBConst>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	f01e 0f10 	tst.w	lr, #16
 8005460:	bf08      	it	eq
 8005462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	6010      	str	r0, [r2, #0]
 800546c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005474:	b672      	cpsid	i
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	b662      	cpsie	i
 8005484:	f7ff fb14 	bl	8004ab0 <vTaskSwitchContext>
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f380 8811 	msr	BASEPRI, r0
 8005490:	bc09      	pop	{r0, r3}
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	6808      	ldr	r0, [r1, #0]
 8005496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f01e 0f10 	tst.w	lr, #16
 800549e:	bf08      	it	eq
 80054a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054a4:	f380 8809 	msr	PSP, r0
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <pxCurrentTCBConst>:
 80054b0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop

080054b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	b672      	cpsid	i
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	b662      	cpsie	i
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054d6:	f7ff fa2f 	bl	8004938 <xTaskIncrementTick>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <xPortSysTickHandler+0x44>)
 80054e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f383 8811 	msr	BASEPRI, r3
}
 80054f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <vPortSetupTimerInterrupt+0x34>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800550a:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <vPortSetupTimerInterrupt+0x38>)
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005510:	4b0a      	ldr	r3, [pc, #40]	@ (800553c <vPortSetupTimerInterrupt+0x3c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0a      	ldr	r2, [pc, #40]	@ (8005540 <vPortSetupTimerInterrupt+0x40>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <vPortSetupTimerInterrupt+0x44>)
 800551e:	3b01      	subs	r3, #1
 8005520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005522:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <vPortSetupTimerInterrupt+0x34>)
 8005524:	2207      	movs	r2, #7
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	e000e010 	.word	0xe000e010
 8005538:	e000e018 	.word	0xe000e018
 800553c:	20000000 	.word	0x20000000
 8005540:	10624dd3 	.word	0x10624dd3
 8005544:	e000e014 	.word	0xe000e014

08005548 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005548:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005558 <vPortEnableVFP+0x10>
 800554c:	6801      	ldr	r1, [r0, #0]
 800554e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005552:	6001      	str	r1, [r0, #0]
 8005554:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005556:	bf00      	nop
 8005558:	e000ed88 	.word	0xe000ed88

0800555c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005568:	f7ff f938 	bl	80047dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800556c:	4b5d      	ldr	r3, [pc, #372]	@ (80056e4 <pvPortMalloc+0x188>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005574:	f000 f920 	bl	80057b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005578:	4b5b      	ldr	r3, [pc, #364]	@ (80056e8 <pvPortMalloc+0x18c>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 8094 	bne.w	80056ae <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800558c:	2208      	movs	r2, #8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	3308      	adds	r3, #8
 80055a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <pvPortMalloc+0x72>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	b672      	cpsid	i
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	b662      	cpsie	i
 80055c6:	617b      	str	r3, [r7, #20]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d06c      	beq.n	80056ae <pvPortMalloc+0x152>
 80055d4:	4b45      	ldr	r3, [pc, #276]	@ (80056ec <pvPortMalloc+0x190>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d867      	bhi.n	80056ae <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055de:	4b44      	ldr	r3, [pc, #272]	@ (80056f0 <pvPortMalloc+0x194>)
 80055e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055e2:	4b43      	ldr	r3, [pc, #268]	@ (80056f0 <pvPortMalloc+0x194>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055e8:	e004      	b.n	80055f4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d903      	bls.n	8005606 <pvPortMalloc+0xaa>
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f1      	bne.n	80055ea <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005606:	4b37      	ldr	r3, [pc, #220]	@ (80056e4 <pvPortMalloc+0x188>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800560c:	429a      	cmp	r2, r3
 800560e:	d04e      	beq.n	80056ae <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2208      	movs	r2, #8
 8005616:	4413      	add	r3, r2
 8005618:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	2308      	movs	r3, #8
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	429a      	cmp	r2, r3
 8005630:	d922      	bls.n	8005678 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4413      	add	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <pvPortMalloc+0x104>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	b672      	cpsid	i
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	b662      	cpsie	i
 8005658:	613b      	str	r3, [r7, #16]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005672:	69b8      	ldr	r0, [r7, #24]
 8005674:	f000 f902 	bl	800587c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005678:	4b1c      	ldr	r3, [pc, #112]	@ (80056ec <pvPortMalloc+0x190>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <pvPortMalloc+0x190>)
 8005684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005686:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <pvPortMalloc+0x190>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <pvPortMalloc+0x198>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d203      	bcs.n	800569a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005692:	4b16      	ldr	r3, [pc, #88]	@ (80056ec <pvPortMalloc+0x190>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <pvPortMalloc+0x198>)
 8005698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <pvPortMalloc+0x18c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056ae:	f7ff f8a3 	bl	80047f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <pvPortMalloc+0x17c>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	b672      	cpsid	i
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	b662      	cpsie	i
 80056d0:	60fb      	str	r3, [r7, #12]
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <pvPortMalloc+0x178>
	return pvReturn;
 80056d8:	69fb      	ldr	r3, [r7, #28]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3728      	adds	r7, #40	@ 0x28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200040bc 	.word	0x200040bc
 80056e8:	200040c8 	.word	0x200040c8
 80056ec:	200040c0 	.word	0x200040c0
 80056f0:	200040b4 	.word	0x200040b4
 80056f4:	200040c4 	.word	0x200040c4

080056f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04e      	beq.n	80057a8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800570a:	2308      	movs	r3, #8
 800570c:	425b      	negs	r3, r3
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4413      	add	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <vPortFree+0xb8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10d      	bne.n	8005742 <vPortFree+0x4a>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	b672      	cpsid	i
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	b662      	cpsie	i
 800573a:	60fb      	str	r3, [r7, #12]
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	e7fd      	b.n	800573e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <vPortFree+0x6e>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	b672      	cpsid	i
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	b662      	cpsie	i
 800575e:	60bb      	str	r3, [r7, #8]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <vPortFree+0xb8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d019      	beq.n	80057a8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d115      	bne.n	80057a8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <vPortFree+0xb8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800578c:	f7ff f826 	bl	80047dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <vPortFree+0xbc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4413      	add	r3, r2
 800579a:	4a06      	ldr	r2, [pc, #24]	@ (80057b4 <vPortFree+0xbc>)
 800579c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f000 f86c 	bl	800587c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057a4:	f7ff f828 	bl	80047f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200040c8 	.word	0x200040c8
 80057b4:	200040c0 	.word	0x200040c0

080057b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057be:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057c4:	4b27      	ldr	r3, [pc, #156]	@ (8005864 <prvHeapInit+0xac>)
 80057c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3307      	adds	r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005864 <prvHeapInit+0xac>)
 80057e8:	4413      	add	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <prvHeapInit+0xb0>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005868 <prvHeapInit+0xb0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005804:	2208      	movs	r2, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a15      	ldr	r2, [pc, #84]	@ (800586c <prvHeapInit+0xb4>)
 8005818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800581a:	4b14      	ldr	r3, [pc, #80]	@ (800586c <prvHeapInit+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005822:	4b12      	ldr	r3, [pc, #72]	@ (800586c <prvHeapInit+0xb4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	1ad2      	subs	r2, r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005838:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <prvHeapInit+0xb4>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a0a      	ldr	r2, [pc, #40]	@ (8005870 <prvHeapInit+0xb8>)
 8005846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a09      	ldr	r2, [pc, #36]	@ (8005874 <prvHeapInit+0xbc>)
 800584e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005850:	4b09      	ldr	r3, [pc, #36]	@ (8005878 <prvHeapInit+0xc0>)
 8005852:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	200004b4 	.word	0x200004b4
 8005868:	200040b4 	.word	0x200040b4
 800586c:	200040bc 	.word	0x200040bc
 8005870:	200040c4 	.word	0x200040c4
 8005874:	200040c0 	.word	0x200040c0
 8005878:	200040c8 	.word	0x200040c8

0800587c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005884:	4b28      	ldr	r3, [pc, #160]	@ (8005928 <prvInsertBlockIntoFreeList+0xac>)
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e002      	b.n	8005890 <prvInsertBlockIntoFreeList+0x14>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d8f7      	bhi.n	800588a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d108      	bne.n	80058be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	441a      	add	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d118      	bne.n	8005904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <prvInsertBlockIntoFreeList+0xb0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d00d      	beq.n	80058fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e008      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <prvInsertBlockIntoFreeList+0xb0>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e003      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d002      	beq.n	800591a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	200040b4 	.word	0x200040b4
 800592c:	200040bc 	.word	0x200040bc

08005930 <std>:
 8005930:	2300      	movs	r3, #0
 8005932:	b510      	push	{r4, lr}
 8005934:	4604      	mov	r4, r0
 8005936:	e9c0 3300 	strd	r3, r3, [r0]
 800593a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800593e:	6083      	str	r3, [r0, #8]
 8005940:	8181      	strh	r1, [r0, #12]
 8005942:	6643      	str	r3, [r0, #100]	@ 0x64
 8005944:	81c2      	strh	r2, [r0, #14]
 8005946:	6183      	str	r3, [r0, #24]
 8005948:	4619      	mov	r1, r3
 800594a:	2208      	movs	r2, #8
 800594c:	305c      	adds	r0, #92	@ 0x5c
 800594e:	f000 f9f9 	bl	8005d44 <memset>
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <std+0x58>)
 8005954:	6263      	str	r3, [r4, #36]	@ 0x24
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <std+0x5c>)
 8005958:	62a3      	str	r3, [r4, #40]	@ 0x28
 800595a:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <std+0x60>)
 800595c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800595e:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <std+0x64>)
 8005960:	6323      	str	r3, [r4, #48]	@ 0x30
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <std+0x68>)
 8005964:	6224      	str	r4, [r4, #32]
 8005966:	429c      	cmp	r4, r3
 8005968:	d006      	beq.n	8005978 <std+0x48>
 800596a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800596e:	4294      	cmp	r4, r2
 8005970:	d002      	beq.n	8005978 <std+0x48>
 8005972:	33d0      	adds	r3, #208	@ 0xd0
 8005974:	429c      	cmp	r4, r3
 8005976:	d105      	bne.n	8005984 <std+0x54>
 8005978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005980:	f000 ba58 	b.w	8005e34 <__retarget_lock_init_recursive>
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	08005b95 	.word	0x08005b95
 800598c:	08005bb7 	.word	0x08005bb7
 8005990:	08005bef 	.word	0x08005bef
 8005994:	08005c13 	.word	0x08005c13
 8005998:	200040cc 	.word	0x200040cc

0800599c <stdio_exit_handler>:
 800599c:	4a02      	ldr	r2, [pc, #8]	@ (80059a8 <stdio_exit_handler+0xc>)
 800599e:	4903      	ldr	r1, [pc, #12]	@ (80059ac <stdio_exit_handler+0x10>)
 80059a0:	4803      	ldr	r0, [pc, #12]	@ (80059b0 <stdio_exit_handler+0x14>)
 80059a2:	f000 b869 	b.w	8005a78 <_fwalk_sglue>
 80059a6:	bf00      	nop
 80059a8:	20000010 	.word	0x20000010
 80059ac:	080066ed 	.word	0x080066ed
 80059b0:	20000020 	.word	0x20000020

080059b4 <cleanup_stdio>:
 80059b4:	6841      	ldr	r1, [r0, #4]
 80059b6:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <cleanup_stdio+0x34>)
 80059b8:	4299      	cmp	r1, r3
 80059ba:	b510      	push	{r4, lr}
 80059bc:	4604      	mov	r4, r0
 80059be:	d001      	beq.n	80059c4 <cleanup_stdio+0x10>
 80059c0:	f000 fe94 	bl	80066ec <_fflush_r>
 80059c4:	68a1      	ldr	r1, [r4, #8]
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <cleanup_stdio+0x38>)
 80059c8:	4299      	cmp	r1, r3
 80059ca:	d002      	beq.n	80059d2 <cleanup_stdio+0x1e>
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 fe8d 	bl	80066ec <_fflush_r>
 80059d2:	68e1      	ldr	r1, [r4, #12]
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <cleanup_stdio+0x3c>)
 80059d6:	4299      	cmp	r1, r3
 80059d8:	d004      	beq.n	80059e4 <cleanup_stdio+0x30>
 80059da:	4620      	mov	r0, r4
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e0:	f000 be84 	b.w	80066ec <_fflush_r>
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	bf00      	nop
 80059e8:	200040cc 	.word	0x200040cc
 80059ec:	20004134 	.word	0x20004134
 80059f0:	2000419c 	.word	0x2000419c

080059f4 <global_stdio_init.part.0>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <global_stdio_init.part.0+0x30>)
 80059f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005a28 <global_stdio_init.part.0+0x34>)
 80059fa:	4a0c      	ldr	r2, [pc, #48]	@ (8005a2c <global_stdio_init.part.0+0x38>)
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	4620      	mov	r0, r4
 8005a00:	2200      	movs	r2, #0
 8005a02:	2104      	movs	r1, #4
 8005a04:	f7ff ff94 	bl	8005930 <std>
 8005a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	2109      	movs	r1, #9
 8005a10:	f7ff ff8e 	bl	8005930 <std>
 8005a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a18:	2202      	movs	r2, #2
 8005a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1e:	2112      	movs	r1, #18
 8005a20:	f7ff bf86 	b.w	8005930 <std>
 8005a24:	20004204 	.word	0x20004204
 8005a28:	200040cc 	.word	0x200040cc
 8005a2c:	0800599d 	.word	0x0800599d

08005a30 <__sfp_lock_acquire>:
 8005a30:	4801      	ldr	r0, [pc, #4]	@ (8005a38 <__sfp_lock_acquire+0x8>)
 8005a32:	f000 ba00 	b.w	8005e36 <__retarget_lock_acquire_recursive>
 8005a36:	bf00      	nop
 8005a38:	2000420d 	.word	0x2000420d

08005a3c <__sfp_lock_release>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	@ (8005a44 <__sfp_lock_release+0x8>)
 8005a3e:	f000 b9fb 	b.w	8005e38 <__retarget_lock_release_recursive>
 8005a42:	bf00      	nop
 8005a44:	2000420d 	.word	0x2000420d

08005a48 <__sinit>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f7ff fff0 	bl	8005a30 <__sfp_lock_acquire>
 8005a50:	6a23      	ldr	r3, [r4, #32]
 8005a52:	b11b      	cbz	r3, 8005a5c <__sinit+0x14>
 8005a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a58:	f7ff bff0 	b.w	8005a3c <__sfp_lock_release>
 8005a5c:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <__sinit+0x28>)
 8005a5e:	6223      	str	r3, [r4, #32]
 8005a60:	4b04      	ldr	r3, [pc, #16]	@ (8005a74 <__sinit+0x2c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f5      	bne.n	8005a54 <__sinit+0xc>
 8005a68:	f7ff ffc4 	bl	80059f4 <global_stdio_init.part.0>
 8005a6c:	e7f2      	b.n	8005a54 <__sinit+0xc>
 8005a6e:	bf00      	nop
 8005a70:	080059b5 	.word	0x080059b5
 8005a74:	20004204 	.word	0x20004204

08005a78 <_fwalk_sglue>:
 8005a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	4688      	mov	r8, r1
 8005a80:	4614      	mov	r4, r2
 8005a82:	2600      	movs	r6, #0
 8005a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a88:	f1b9 0901 	subs.w	r9, r9, #1
 8005a8c:	d505      	bpl.n	8005a9a <_fwalk_sglue+0x22>
 8005a8e:	6824      	ldr	r4, [r4, #0]
 8005a90:	2c00      	cmp	r4, #0
 8005a92:	d1f7      	bne.n	8005a84 <_fwalk_sglue+0xc>
 8005a94:	4630      	mov	r0, r6
 8005a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a9a:	89ab      	ldrh	r3, [r5, #12]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d907      	bls.n	8005ab0 <_fwalk_sglue+0x38>
 8005aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	d003      	beq.n	8005ab0 <_fwalk_sglue+0x38>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4638      	mov	r0, r7
 8005aac:	47c0      	blx	r8
 8005aae:	4306      	orrs	r6, r0
 8005ab0:	3568      	adds	r5, #104	@ 0x68
 8005ab2:	e7e9      	b.n	8005a88 <_fwalk_sglue+0x10>

08005ab4 <iprintf>:
 8005ab4:	b40f      	push	{r0, r1, r2, r3}
 8005ab6:	b507      	push	{r0, r1, r2, lr}
 8005ab8:	4906      	ldr	r1, [pc, #24]	@ (8005ad4 <iprintf+0x20>)
 8005aba:	ab04      	add	r3, sp, #16
 8005abc:	6808      	ldr	r0, [r1, #0]
 8005abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac2:	6881      	ldr	r1, [r0, #8]
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	f000 fae9 	bl	800609c <_vfiprintf_r>
 8005aca:	b003      	add	sp, #12
 8005acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad0:	b004      	add	sp, #16
 8005ad2:	4770      	bx	lr
 8005ad4:	2000001c 	.word	0x2000001c

08005ad8 <_puts_r>:
 8005ad8:	6a03      	ldr	r3, [r0, #32]
 8005ada:	b570      	push	{r4, r5, r6, lr}
 8005adc:	6884      	ldr	r4, [r0, #8]
 8005ade:	4605      	mov	r5, r0
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	b90b      	cbnz	r3, 8005ae8 <_puts_r+0x10>
 8005ae4:	f7ff ffb0 	bl	8005a48 <__sinit>
 8005ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aea:	07db      	lsls	r3, r3, #31
 8005aec:	d405      	bmi.n	8005afa <_puts_r+0x22>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	0598      	lsls	r0, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_puts_r+0x22>
 8005af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005af6:	f000 f99e 	bl	8005e36 <__retarget_lock_acquire_recursive>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	0719      	lsls	r1, r3, #28
 8005afe:	d502      	bpl.n	8005b06 <_puts_r+0x2e>
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d135      	bne.n	8005b72 <_puts_r+0x9a>
 8005b06:	4621      	mov	r1, r4
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f000 f8c5 	bl	8005c98 <__swsetup_r>
 8005b0e:	b380      	cbz	r0, 8005b72 <_puts_r+0x9a>
 8005b10:	f04f 35ff 	mov.w	r5, #4294967295
 8005b14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b16:	07da      	lsls	r2, r3, #31
 8005b18:	d405      	bmi.n	8005b26 <_puts_r+0x4e>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	059b      	lsls	r3, r3, #22
 8005b1e:	d402      	bmi.n	8005b26 <_puts_r+0x4e>
 8005b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b22:	f000 f989 	bl	8005e38 <__retarget_lock_release_recursive>
 8005b26:	4628      	mov	r0, r5
 8005b28:	bd70      	pop	{r4, r5, r6, pc}
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da04      	bge.n	8005b38 <_puts_r+0x60>
 8005b2e:	69a2      	ldr	r2, [r4, #24]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	dc17      	bgt.n	8005b64 <_puts_r+0x8c>
 8005b34:	290a      	cmp	r1, #10
 8005b36:	d015      	beq.n	8005b64 <_puts_r+0x8c>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	6022      	str	r2, [r4, #0]
 8005b3e:	7019      	strb	r1, [r3, #0]
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b46:	3b01      	subs	r3, #1
 8005b48:	60a3      	str	r3, [r4, #8]
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d1ed      	bne.n	8005b2a <_puts_r+0x52>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da11      	bge.n	8005b76 <_puts_r+0x9e>
 8005b52:	4622      	mov	r2, r4
 8005b54:	210a      	movs	r1, #10
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 f85f 	bl	8005c1a <__swbuf_r>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0d7      	beq.n	8005b10 <_puts_r+0x38>
 8005b60:	250a      	movs	r5, #10
 8005b62:	e7d7      	b.n	8005b14 <_puts_r+0x3c>
 8005b64:	4622      	mov	r2, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 f857 	bl	8005c1a <__swbuf_r>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d1e7      	bne.n	8005b40 <_puts_r+0x68>
 8005b70:	e7ce      	b.n	8005b10 <_puts_r+0x38>
 8005b72:	3e01      	subs	r6, #1
 8005b74:	e7e4      	b.n	8005b40 <_puts_r+0x68>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	6022      	str	r2, [r4, #0]
 8005b7c:	220a      	movs	r2, #10
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e7ee      	b.n	8005b60 <_puts_r+0x88>
	...

08005b84 <puts>:
 8005b84:	4b02      	ldr	r3, [pc, #8]	@ (8005b90 <puts+0xc>)
 8005b86:	4601      	mov	r1, r0
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f7ff bfa5 	b.w	8005ad8 <_puts_r>
 8005b8e:	bf00      	nop
 8005b90:	2000001c 	.word	0x2000001c

08005b94 <__sread>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	f000 f8fc 	bl	8005d98 <_read_r>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	bfab      	itete	ge
 8005ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ba8:	181b      	addge	r3, r3, r0
 8005baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bae:	bfac      	ite	ge
 8005bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bb2:	81a3      	strhlt	r3, [r4, #12]
 8005bb4:	bd10      	pop	{r4, pc}

08005bb6 <__swrite>:
 8005bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	461f      	mov	r7, r3
 8005bbc:	898b      	ldrh	r3, [r1, #12]
 8005bbe:	05db      	lsls	r3, r3, #23
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	d505      	bpl.n	8005bd4 <__swrite+0x1e>
 8005bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bcc:	2302      	movs	r3, #2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f000 f8d0 	bl	8005d74 <_lseek_r>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	4632      	mov	r2, r6
 8005be2:	463b      	mov	r3, r7
 8005be4:	4628      	mov	r0, r5
 8005be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bea:	f000 b8e7 	b.w	8005dbc <_write_r>

08005bee <__sseek>:
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf6:	f000 f8bd 	bl	8005d74 <_lseek_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	bf15      	itete	ne
 8005c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c0a:	81a3      	strheq	r3, [r4, #12]
 8005c0c:	bf18      	it	ne
 8005c0e:	81a3      	strhne	r3, [r4, #12]
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <__sclose>:
 8005c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c16:	f000 b89d 	b.w	8005d54 <_close_r>

08005c1a <__swbuf_r>:
 8005c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1c:	460e      	mov	r6, r1
 8005c1e:	4614      	mov	r4, r2
 8005c20:	4605      	mov	r5, r0
 8005c22:	b118      	cbz	r0, 8005c2c <__swbuf_r+0x12>
 8005c24:	6a03      	ldr	r3, [r0, #32]
 8005c26:	b90b      	cbnz	r3, 8005c2c <__swbuf_r+0x12>
 8005c28:	f7ff ff0e 	bl	8005a48 <__sinit>
 8005c2c:	69a3      	ldr	r3, [r4, #24]
 8005c2e:	60a3      	str	r3, [r4, #8]
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	071a      	lsls	r2, r3, #28
 8005c34:	d501      	bpl.n	8005c3a <__swbuf_r+0x20>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	b943      	cbnz	r3, 8005c4c <__swbuf_r+0x32>
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f82b 	bl	8005c98 <__swsetup_r>
 8005c42:	b118      	cbz	r0, 8005c4c <__swbuf_r+0x32>
 8005c44:	f04f 37ff 	mov.w	r7, #4294967295
 8005c48:	4638      	mov	r0, r7
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	6922      	ldr	r2, [r4, #16]
 8005c50:	1a98      	subs	r0, r3, r2
 8005c52:	6963      	ldr	r3, [r4, #20]
 8005c54:	b2f6      	uxtb	r6, r6
 8005c56:	4283      	cmp	r3, r0
 8005c58:	4637      	mov	r7, r6
 8005c5a:	dc05      	bgt.n	8005c68 <__swbuf_r+0x4e>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fd44 	bl	80066ec <_fflush_r>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d1ed      	bne.n	8005c44 <__swbuf_r+0x2a>
 8005c68:	68a3      	ldr	r3, [r4, #8]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	701e      	strb	r6, [r3, #0]
 8005c76:	6962      	ldr	r2, [r4, #20]
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d004      	beq.n	8005c88 <__swbuf_r+0x6e>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	07db      	lsls	r3, r3, #31
 8005c82:	d5e1      	bpl.n	8005c48 <__swbuf_r+0x2e>
 8005c84:	2e0a      	cmp	r6, #10
 8005c86:	d1df      	bne.n	8005c48 <__swbuf_r+0x2e>
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 fd2e 	bl	80066ec <_fflush_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0d9      	beq.n	8005c48 <__swbuf_r+0x2e>
 8005c94:	e7d6      	b.n	8005c44 <__swbuf_r+0x2a>
	...

08005c98 <__swsetup_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4b29      	ldr	r3, [pc, #164]	@ (8005d40 <__swsetup_r+0xa8>)
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	b118      	cbz	r0, 8005cac <__swsetup_r+0x14>
 8005ca4:	6a03      	ldr	r3, [r0, #32]
 8005ca6:	b90b      	cbnz	r3, 8005cac <__swsetup_r+0x14>
 8005ca8:	f7ff fece 	bl	8005a48 <__sinit>
 8005cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb0:	0719      	lsls	r1, r3, #28
 8005cb2:	d422      	bmi.n	8005cfa <__swsetup_r+0x62>
 8005cb4:	06da      	lsls	r2, r3, #27
 8005cb6:	d407      	bmi.n	8005cc8 <__swsetup_r+0x30>
 8005cb8:	2209      	movs	r2, #9
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc0:	81a3      	strh	r3, [r4, #12]
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc6:	e033      	b.n	8005d30 <__swsetup_r+0x98>
 8005cc8:	0758      	lsls	r0, r3, #29
 8005cca:	d512      	bpl.n	8005cf2 <__swsetup_r+0x5a>
 8005ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cce:	b141      	cbz	r1, 8005ce2 <__swsetup_r+0x4a>
 8005cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	d002      	beq.n	8005cde <__swsetup_r+0x46>
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 f8bd 	bl	8005e58 <_free_r>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	2300      	movs	r3, #0
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	f043 0308 	orr.w	r3, r3, #8
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	b94b      	cbnz	r3, 8005d12 <__swsetup_r+0x7a>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d08:	d003      	beq.n	8005d12 <__swsetup_r+0x7a>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 fd3b 	bl	8006788 <__smakebuf_r>
 8005d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d16:	f013 0201 	ands.w	r2, r3, #1
 8005d1a:	d00a      	beq.n	8005d32 <__swsetup_r+0x9a>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	60a2      	str	r2, [r4, #8]
 8005d20:	6962      	ldr	r2, [r4, #20]
 8005d22:	4252      	negs	r2, r2
 8005d24:	61a2      	str	r2, [r4, #24]
 8005d26:	6922      	ldr	r2, [r4, #16]
 8005d28:	b942      	cbnz	r2, 8005d3c <__swsetup_r+0xa4>
 8005d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d2e:	d1c5      	bne.n	8005cbc <__swsetup_r+0x24>
 8005d30:	bd38      	pop	{r3, r4, r5, pc}
 8005d32:	0799      	lsls	r1, r3, #30
 8005d34:	bf58      	it	pl
 8005d36:	6962      	ldrpl	r2, [r4, #20]
 8005d38:	60a2      	str	r2, [r4, #8]
 8005d3a:	e7f4      	b.n	8005d26 <__swsetup_r+0x8e>
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e7f7      	b.n	8005d30 <__swsetup_r+0x98>
 8005d40:	2000001c 	.word	0x2000001c

08005d44 <memset>:
 8005d44:	4402      	add	r2, r0
 8005d46:	4603      	mov	r3, r0
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <memset+0xa>
 8005d4c:	4770      	bx	lr
 8005d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d52:	e7f9      	b.n	8005d48 <memset+0x4>

08005d54 <_close_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d06      	ldr	r5, [pc, #24]	@ (8005d70 <_close_r+0x1c>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f7fb fb1b 	bl	800139a <_close>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_close_r+0x1a>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_close_r+0x1a>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20004208 	.word	0x20004208

08005d74 <_lseek_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	@ (8005d94 <_lseek_r+0x20>)
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	602a      	str	r2, [r5, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f7fb fb30 	bl	80013e8 <_lseek>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_lseek_r+0x1e>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_lseek_r+0x1e>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20004208 	.word	0x20004208

08005d98 <_read_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	@ (8005db8 <_read_r+0x20>)
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fb fabe 	bl	8001328 <_read>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_read_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_read_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20004208 	.word	0x20004208

08005dbc <_write_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	@ (8005ddc <_write_r+0x20>)
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fb fac9 	bl	8001362 <_write>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_write_r+0x1e>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_write_r+0x1e>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20004208 	.word	0x20004208

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	@ (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	2000001c 	.word	0x2000001c

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	@ (8005e24 <__libc_init_array+0x38>)
 8005df0:	4c0d      	ldr	r4, [pc, #52]	@ (8005e28 <__libc_init_array+0x3c>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	2600      	movs	r6, #0
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8005e2c <__libc_init_array+0x40>)
 8005dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8005e30 <__libc_init_array+0x44>)
 8005e00:	f000 fd30 	bl	8006864 <_init>
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2600      	movs	r6, #0
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	08006a9c 	.word	0x08006a9c
 8005e28:	08006a9c 	.word	0x08006a9c
 8005e2c:	08006a9c 	.word	0x08006a9c
 8005e30:	08006aa0 	.word	0x08006aa0

08005e34 <__retarget_lock_init_recursive>:
 8005e34:	4770      	bx	lr

08005e36 <__retarget_lock_acquire_recursive>:
 8005e36:	4770      	bx	lr

08005e38 <__retarget_lock_release_recursive>:
 8005e38:	4770      	bx	lr

08005e3a <memcpy>:
 8005e3a:	440a      	add	r2, r1
 8005e3c:	4291      	cmp	r1, r2
 8005e3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e42:	d100      	bne.n	8005e46 <memcpy+0xc>
 8005e44:	4770      	bx	lr
 8005e46:	b510      	push	{r4, lr}
 8005e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e50:	4291      	cmp	r1, r2
 8005e52:	d1f9      	bne.n	8005e48 <memcpy+0xe>
 8005e54:	bd10      	pop	{r4, pc}
	...

08005e58 <_free_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d041      	beq.n	8005ee4 <_free_r+0x8c>
 8005e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e64:	1f0c      	subs	r4, r1, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfb8      	it	lt
 8005e6a:	18e4      	addlt	r4, r4, r3
 8005e6c:	f000 f8e0 	bl	8006030 <__malloc_lock>
 8005e70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <_free_r+0x90>)
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	b933      	cbnz	r3, 8005e84 <_free_r+0x2c>
 8005e76:	6063      	str	r3, [r4, #4]
 8005e78:	6014      	str	r4, [r2, #0]
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e80:	f000 b8dc 	b.w	800603c <__malloc_unlock>
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	d908      	bls.n	8005e9a <_free_r+0x42>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	1821      	adds	r1, r4, r0
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf01      	itttt	eq
 8005e90:	6819      	ldreq	r1, [r3, #0]
 8005e92:	685b      	ldreq	r3, [r3, #4]
 8005e94:	1809      	addeq	r1, r1, r0
 8005e96:	6021      	streq	r1, [r4, #0]
 8005e98:	e7ed      	b.n	8005e76 <_free_r+0x1e>
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	b10b      	cbz	r3, 8005ea4 <_free_r+0x4c>
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d9fa      	bls.n	8005e9a <_free_r+0x42>
 8005ea4:	6811      	ldr	r1, [r2, #0]
 8005ea6:	1850      	adds	r0, r2, r1
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d10b      	bne.n	8005ec4 <_free_r+0x6c>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	4401      	add	r1, r0
 8005eb0:	1850      	adds	r0, r2, r1
 8005eb2:	4283      	cmp	r3, r0
 8005eb4:	6011      	str	r1, [r2, #0]
 8005eb6:	d1e0      	bne.n	8005e7a <_free_r+0x22>
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	6053      	str	r3, [r2, #4]
 8005ebe:	4408      	add	r0, r1
 8005ec0:	6010      	str	r0, [r2, #0]
 8005ec2:	e7da      	b.n	8005e7a <_free_r+0x22>
 8005ec4:	d902      	bls.n	8005ecc <_free_r+0x74>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	e7d6      	b.n	8005e7a <_free_r+0x22>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	1821      	adds	r1, r4, r0
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	bf04      	itt	eq
 8005ed4:	6819      	ldreq	r1, [r3, #0]
 8005ed6:	685b      	ldreq	r3, [r3, #4]
 8005ed8:	6063      	str	r3, [r4, #4]
 8005eda:	bf04      	itt	eq
 8005edc:	1809      	addeq	r1, r1, r0
 8005ede:	6021      	streq	r1, [r4, #0]
 8005ee0:	6054      	str	r4, [r2, #4]
 8005ee2:	e7ca      	b.n	8005e7a <_free_r+0x22>
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20004214 	.word	0x20004214

08005eec <sbrk_aligned>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	4e0f      	ldr	r6, [pc, #60]	@ (8005f2c <sbrk_aligned+0x40>)
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	6831      	ldr	r1, [r6, #0]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	b911      	cbnz	r1, 8005efe <sbrk_aligned+0x12>
 8005ef8:	f000 fca4 	bl	8006844 <_sbrk_r>
 8005efc:	6030      	str	r0, [r6, #0]
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fc9f 	bl	8006844 <_sbrk_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d103      	bne.n	8005f12 <sbrk_aligned+0x26>
 8005f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f0e:	4620      	mov	r0, r4
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	1cc4      	adds	r4, r0, #3
 8005f14:	f024 0403 	bic.w	r4, r4, #3
 8005f18:	42a0      	cmp	r0, r4
 8005f1a:	d0f8      	beq.n	8005f0e <sbrk_aligned+0x22>
 8005f1c:	1a21      	subs	r1, r4, r0
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 fc90 	bl	8006844 <_sbrk_r>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d1f2      	bne.n	8005f0e <sbrk_aligned+0x22>
 8005f28:	e7ef      	b.n	8005f0a <sbrk_aligned+0x1e>
 8005f2a:	bf00      	nop
 8005f2c:	20004210 	.word	0x20004210

08005f30 <_malloc_r>:
 8005f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f34:	1ccd      	adds	r5, r1, #3
 8005f36:	f025 0503 	bic.w	r5, r5, #3
 8005f3a:	3508      	adds	r5, #8
 8005f3c:	2d0c      	cmp	r5, #12
 8005f3e:	bf38      	it	cc
 8005f40:	250c      	movcc	r5, #12
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	4606      	mov	r6, r0
 8005f46:	db01      	blt.n	8005f4c <_malloc_r+0x1c>
 8005f48:	42a9      	cmp	r1, r5
 8005f4a:	d904      	bls.n	8005f56 <_malloc_r+0x26>
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	2000      	movs	r0, #0
 8005f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800602c <_malloc_r+0xfc>
 8005f5a:	f000 f869 	bl	8006030 <__malloc_lock>
 8005f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f62:	461c      	mov	r4, r3
 8005f64:	bb44      	cbnz	r4, 8005fb8 <_malloc_r+0x88>
 8005f66:	4629      	mov	r1, r5
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff ffbf 	bl	8005eec <sbrk_aligned>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	4604      	mov	r4, r0
 8005f72:	d158      	bne.n	8006026 <_malloc_r+0xf6>
 8005f74:	f8d8 4000 	ldr.w	r4, [r8]
 8005f78:	4627      	mov	r7, r4
 8005f7a:	2f00      	cmp	r7, #0
 8005f7c:	d143      	bne.n	8006006 <_malloc_r+0xd6>
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	d04b      	beq.n	800601a <_malloc_r+0xea>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	4639      	mov	r1, r7
 8005f86:	4630      	mov	r0, r6
 8005f88:	eb04 0903 	add.w	r9, r4, r3
 8005f8c:	f000 fc5a 	bl	8006844 <_sbrk_r>
 8005f90:	4581      	cmp	r9, r0
 8005f92:	d142      	bne.n	800601a <_malloc_r+0xea>
 8005f94:	6821      	ldr	r1, [r4, #0]
 8005f96:	1a6d      	subs	r5, r5, r1
 8005f98:	4629      	mov	r1, r5
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7ff ffa6 	bl	8005eec <sbrk_aligned>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d03a      	beq.n	800601a <_malloc_r+0xea>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	442b      	add	r3, r5
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	f8d8 3000 	ldr.w	r3, [r8]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	bb62      	cbnz	r2, 800600c <_malloc_r+0xdc>
 8005fb2:	f8c8 7000 	str.w	r7, [r8]
 8005fb6:	e00f      	b.n	8005fd8 <_malloc_r+0xa8>
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	1b52      	subs	r2, r2, r5
 8005fbc:	d420      	bmi.n	8006000 <_malloc_r+0xd0>
 8005fbe:	2a0b      	cmp	r2, #11
 8005fc0:	d917      	bls.n	8005ff2 <_malloc_r+0xc2>
 8005fc2:	1961      	adds	r1, r4, r5
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	6025      	str	r5, [r4, #0]
 8005fc8:	bf18      	it	ne
 8005fca:	6059      	strne	r1, [r3, #4]
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	bf08      	it	eq
 8005fd0:	f8c8 1000 	streq.w	r1, [r8]
 8005fd4:	5162      	str	r2, [r4, r5]
 8005fd6:	604b      	str	r3, [r1, #4]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 f82f 	bl	800603c <__malloc_unlock>
 8005fde:	f104 000b 	add.w	r0, r4, #11
 8005fe2:	1d23      	adds	r3, r4, #4
 8005fe4:	f020 0007 	bic.w	r0, r0, #7
 8005fe8:	1ac2      	subs	r2, r0, r3
 8005fea:	bf1c      	itt	ne
 8005fec:	1a1b      	subne	r3, r3, r0
 8005fee:	50a3      	strne	r3, [r4, r2]
 8005ff0:	e7af      	b.n	8005f52 <_malloc_r+0x22>
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	bf0c      	ite	eq
 8005ff8:	f8c8 2000 	streq.w	r2, [r8]
 8005ffc:	605a      	strne	r2, [r3, #4]
 8005ffe:	e7eb      	b.n	8005fd8 <_malloc_r+0xa8>
 8006000:	4623      	mov	r3, r4
 8006002:	6864      	ldr	r4, [r4, #4]
 8006004:	e7ae      	b.n	8005f64 <_malloc_r+0x34>
 8006006:	463c      	mov	r4, r7
 8006008:	687f      	ldr	r7, [r7, #4]
 800600a:	e7b6      	b.n	8005f7a <_malloc_r+0x4a>
 800600c:	461a      	mov	r2, r3
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	42a3      	cmp	r3, r4
 8006012:	d1fb      	bne.n	800600c <_malloc_r+0xdc>
 8006014:	2300      	movs	r3, #0
 8006016:	6053      	str	r3, [r2, #4]
 8006018:	e7de      	b.n	8005fd8 <_malloc_r+0xa8>
 800601a:	230c      	movs	r3, #12
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	4630      	mov	r0, r6
 8006020:	f000 f80c 	bl	800603c <__malloc_unlock>
 8006024:	e794      	b.n	8005f50 <_malloc_r+0x20>
 8006026:	6005      	str	r5, [r0, #0]
 8006028:	e7d6      	b.n	8005fd8 <_malloc_r+0xa8>
 800602a:	bf00      	nop
 800602c:	20004214 	.word	0x20004214

08006030 <__malloc_lock>:
 8006030:	4801      	ldr	r0, [pc, #4]	@ (8006038 <__malloc_lock+0x8>)
 8006032:	f7ff bf00 	b.w	8005e36 <__retarget_lock_acquire_recursive>
 8006036:	bf00      	nop
 8006038:	2000420c 	.word	0x2000420c

0800603c <__malloc_unlock>:
 800603c:	4801      	ldr	r0, [pc, #4]	@ (8006044 <__malloc_unlock+0x8>)
 800603e:	f7ff befb 	b.w	8005e38 <__retarget_lock_release_recursive>
 8006042:	bf00      	nop
 8006044:	2000420c 	.word	0x2000420c

08006048 <__sfputc_r>:
 8006048:	6893      	ldr	r3, [r2, #8]
 800604a:	3b01      	subs	r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	b410      	push	{r4}
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	da08      	bge.n	8006066 <__sfputc_r+0x1e>
 8006054:	6994      	ldr	r4, [r2, #24]
 8006056:	42a3      	cmp	r3, r4
 8006058:	db01      	blt.n	800605e <__sfputc_r+0x16>
 800605a:	290a      	cmp	r1, #10
 800605c:	d103      	bne.n	8006066 <__sfputc_r+0x1e>
 800605e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006062:	f7ff bdda 	b.w	8005c1a <__swbuf_r>
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	1c58      	adds	r0, r3, #1
 800606a:	6010      	str	r0, [r2, #0]
 800606c:	7019      	strb	r1, [r3, #0]
 800606e:	4608      	mov	r0, r1
 8006070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006074:	4770      	bx	lr

08006076 <__sfputs_r>:
 8006076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	4614      	mov	r4, r2
 800607e:	18d5      	adds	r5, r2, r3
 8006080:	42ac      	cmp	r4, r5
 8006082:	d101      	bne.n	8006088 <__sfputs_r+0x12>
 8006084:	2000      	movs	r0, #0
 8006086:	e007      	b.n	8006098 <__sfputs_r+0x22>
 8006088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608c:	463a      	mov	r2, r7
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff ffda 	bl	8006048 <__sfputc_r>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d1f3      	bne.n	8006080 <__sfputs_r+0xa>
 8006098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800609c <_vfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	460d      	mov	r5, r1
 80060a2:	b09d      	sub	sp, #116	@ 0x74
 80060a4:	4614      	mov	r4, r2
 80060a6:	4698      	mov	r8, r3
 80060a8:	4606      	mov	r6, r0
 80060aa:	b118      	cbz	r0, 80060b4 <_vfiprintf_r+0x18>
 80060ac:	6a03      	ldr	r3, [r0, #32]
 80060ae:	b90b      	cbnz	r3, 80060b4 <_vfiprintf_r+0x18>
 80060b0:	f7ff fcca 	bl	8005a48 <__sinit>
 80060b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	d405      	bmi.n	80060c6 <_vfiprintf_r+0x2a>
 80060ba:	89ab      	ldrh	r3, [r5, #12]
 80060bc:	059a      	lsls	r2, r3, #22
 80060be:	d402      	bmi.n	80060c6 <_vfiprintf_r+0x2a>
 80060c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060c2:	f7ff feb8 	bl	8005e36 <__retarget_lock_acquire_recursive>
 80060c6:	89ab      	ldrh	r3, [r5, #12]
 80060c8:	071b      	lsls	r3, r3, #28
 80060ca:	d501      	bpl.n	80060d0 <_vfiprintf_r+0x34>
 80060cc:	692b      	ldr	r3, [r5, #16]
 80060ce:	b99b      	cbnz	r3, 80060f8 <_vfiprintf_r+0x5c>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff fde0 	bl	8005c98 <__swsetup_r>
 80060d8:	b170      	cbz	r0, 80060f8 <_vfiprintf_r+0x5c>
 80060da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060dc:	07dc      	lsls	r4, r3, #31
 80060de:	d504      	bpl.n	80060ea <_vfiprintf_r+0x4e>
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	b01d      	add	sp, #116	@ 0x74
 80060e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	0598      	lsls	r0, r3, #22
 80060ee:	d4f7      	bmi.n	80060e0 <_vfiprintf_r+0x44>
 80060f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060f2:	f7ff fea1 	bl	8005e38 <__retarget_lock_release_recursive>
 80060f6:	e7f3      	b.n	80060e0 <_vfiprintf_r+0x44>
 80060f8:	2300      	movs	r3, #0
 80060fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80060fc:	2320      	movs	r3, #32
 80060fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006102:	f8cd 800c 	str.w	r8, [sp, #12]
 8006106:	2330      	movs	r3, #48	@ 0x30
 8006108:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062b8 <_vfiprintf_r+0x21c>
 800610c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006110:	f04f 0901 	mov.w	r9, #1
 8006114:	4623      	mov	r3, r4
 8006116:	469a      	mov	sl, r3
 8006118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800611c:	b10a      	cbz	r2, 8006122 <_vfiprintf_r+0x86>
 800611e:	2a25      	cmp	r2, #37	@ 0x25
 8006120:	d1f9      	bne.n	8006116 <_vfiprintf_r+0x7a>
 8006122:	ebba 0b04 	subs.w	fp, sl, r4
 8006126:	d00b      	beq.n	8006140 <_vfiprintf_r+0xa4>
 8006128:	465b      	mov	r3, fp
 800612a:	4622      	mov	r2, r4
 800612c:	4629      	mov	r1, r5
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff ffa1 	bl	8006076 <__sfputs_r>
 8006134:	3001      	adds	r0, #1
 8006136:	f000 80a7 	beq.w	8006288 <_vfiprintf_r+0x1ec>
 800613a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800613c:	445a      	add	r2, fp
 800613e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006140:	f89a 3000 	ldrb.w	r3, [sl]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 809f 	beq.w	8006288 <_vfiprintf_r+0x1ec>
 800614a:	2300      	movs	r3, #0
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006154:	f10a 0a01 	add.w	sl, sl, #1
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006160:	931a      	str	r3, [sp, #104]	@ 0x68
 8006162:	4654      	mov	r4, sl
 8006164:	2205      	movs	r2, #5
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4853      	ldr	r0, [pc, #332]	@ (80062b8 <_vfiprintf_r+0x21c>)
 800616c:	f7fa f850 	bl	8000210 <memchr>
 8006170:	9a04      	ldr	r2, [sp, #16]
 8006172:	b9d8      	cbnz	r0, 80061ac <_vfiprintf_r+0x110>
 8006174:	06d1      	lsls	r1, r2, #27
 8006176:	bf44      	itt	mi
 8006178:	2320      	movmi	r3, #32
 800617a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800617e:	0713      	lsls	r3, r2, #28
 8006180:	bf44      	itt	mi
 8006182:	232b      	movmi	r3, #43	@ 0x2b
 8006184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006188:	f89a 3000 	ldrb.w	r3, [sl]
 800618c:	2b2a      	cmp	r3, #42	@ 0x2a
 800618e:	d015      	beq.n	80061bc <_vfiprintf_r+0x120>
 8006190:	9a07      	ldr	r2, [sp, #28]
 8006192:	4654      	mov	r4, sl
 8006194:	2000      	movs	r0, #0
 8006196:	f04f 0c0a 	mov.w	ip, #10
 800619a:	4621      	mov	r1, r4
 800619c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a0:	3b30      	subs	r3, #48	@ 0x30
 80061a2:	2b09      	cmp	r3, #9
 80061a4:	d94b      	bls.n	800623e <_vfiprintf_r+0x1a2>
 80061a6:	b1b0      	cbz	r0, 80061d6 <_vfiprintf_r+0x13a>
 80061a8:	9207      	str	r2, [sp, #28]
 80061aa:	e014      	b.n	80061d6 <_vfiprintf_r+0x13a>
 80061ac:	eba0 0308 	sub.w	r3, r0, r8
 80061b0:	fa09 f303 	lsl.w	r3, r9, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	46a2      	mov	sl, r4
 80061ba:	e7d2      	b.n	8006162 <_vfiprintf_r+0xc6>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	1d19      	adds	r1, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	9103      	str	r1, [sp, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfbb      	ittet	lt
 80061c8:	425b      	neglt	r3, r3
 80061ca:	f042 0202 	orrlt.w	r2, r2, #2
 80061ce:	9307      	strge	r3, [sp, #28]
 80061d0:	9307      	strlt	r3, [sp, #28]
 80061d2:	bfb8      	it	lt
 80061d4:	9204      	strlt	r2, [sp, #16]
 80061d6:	7823      	ldrb	r3, [r4, #0]
 80061d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80061da:	d10a      	bne.n	80061f2 <_vfiprintf_r+0x156>
 80061dc:	7863      	ldrb	r3, [r4, #1]
 80061de:	2b2a      	cmp	r3, #42	@ 0x2a
 80061e0:	d132      	bne.n	8006248 <_vfiprintf_r+0x1ac>
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	9203      	str	r2, [sp, #12]
 80061ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061ee:	3402      	adds	r4, #2
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062c8 <_vfiprintf_r+0x22c>
 80061f6:	7821      	ldrb	r1, [r4, #0]
 80061f8:	2203      	movs	r2, #3
 80061fa:	4650      	mov	r0, sl
 80061fc:	f7fa f808 	bl	8000210 <memchr>
 8006200:	b138      	cbz	r0, 8006212 <_vfiprintf_r+0x176>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	eba0 000a 	sub.w	r0, r0, sl
 8006208:	2240      	movs	r2, #64	@ 0x40
 800620a:	4082      	lsls	r2, r0
 800620c:	4313      	orrs	r3, r2
 800620e:	3401      	adds	r4, #1
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006216:	4829      	ldr	r0, [pc, #164]	@ (80062bc <_vfiprintf_r+0x220>)
 8006218:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800621c:	2206      	movs	r2, #6
 800621e:	f7f9 fff7 	bl	8000210 <memchr>
 8006222:	2800      	cmp	r0, #0
 8006224:	d03f      	beq.n	80062a6 <_vfiprintf_r+0x20a>
 8006226:	4b26      	ldr	r3, [pc, #152]	@ (80062c0 <_vfiprintf_r+0x224>)
 8006228:	bb1b      	cbnz	r3, 8006272 <_vfiprintf_r+0x1d6>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	3307      	adds	r3, #7
 800622e:	f023 0307 	bic.w	r3, r3, #7
 8006232:	3308      	adds	r3, #8
 8006234:	9303      	str	r3, [sp, #12]
 8006236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006238:	443b      	add	r3, r7
 800623a:	9309      	str	r3, [sp, #36]	@ 0x24
 800623c:	e76a      	b.n	8006114 <_vfiprintf_r+0x78>
 800623e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006242:	460c      	mov	r4, r1
 8006244:	2001      	movs	r0, #1
 8006246:	e7a8      	b.n	800619a <_vfiprintf_r+0xfe>
 8006248:	2300      	movs	r3, #0
 800624a:	3401      	adds	r4, #1
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	4619      	mov	r1, r3
 8006250:	f04f 0c0a 	mov.w	ip, #10
 8006254:	4620      	mov	r0, r4
 8006256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625a:	3a30      	subs	r2, #48	@ 0x30
 800625c:	2a09      	cmp	r2, #9
 800625e:	d903      	bls.n	8006268 <_vfiprintf_r+0x1cc>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0c6      	beq.n	80061f2 <_vfiprintf_r+0x156>
 8006264:	9105      	str	r1, [sp, #20]
 8006266:	e7c4      	b.n	80061f2 <_vfiprintf_r+0x156>
 8006268:	fb0c 2101 	mla	r1, ip, r1, r2
 800626c:	4604      	mov	r4, r0
 800626e:	2301      	movs	r3, #1
 8006270:	e7f0      	b.n	8006254 <_vfiprintf_r+0x1b8>
 8006272:	ab03      	add	r3, sp, #12
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	462a      	mov	r2, r5
 8006278:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <_vfiprintf_r+0x228>)
 800627a:	a904      	add	r1, sp, #16
 800627c:	4630      	mov	r0, r6
 800627e:	f3af 8000 	nop.w
 8006282:	4607      	mov	r7, r0
 8006284:	1c78      	adds	r0, r7, #1
 8006286:	d1d6      	bne.n	8006236 <_vfiprintf_r+0x19a>
 8006288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800628a:	07d9      	lsls	r1, r3, #31
 800628c:	d405      	bmi.n	800629a <_vfiprintf_r+0x1fe>
 800628e:	89ab      	ldrh	r3, [r5, #12]
 8006290:	059a      	lsls	r2, r3, #22
 8006292:	d402      	bmi.n	800629a <_vfiprintf_r+0x1fe>
 8006294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006296:	f7ff fdcf 	bl	8005e38 <__retarget_lock_release_recursive>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	065b      	lsls	r3, r3, #25
 800629e:	f53f af1f 	bmi.w	80060e0 <_vfiprintf_r+0x44>
 80062a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062a4:	e71e      	b.n	80060e4 <_vfiprintf_r+0x48>
 80062a6:	ab03      	add	r3, sp, #12
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	462a      	mov	r2, r5
 80062ac:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <_vfiprintf_r+0x228>)
 80062ae:	a904      	add	r1, sp, #16
 80062b0:	4630      	mov	r0, r6
 80062b2:	f000 f879 	bl	80063a8 <_printf_i>
 80062b6:	e7e4      	b.n	8006282 <_vfiprintf_r+0x1e6>
 80062b8:	08006a60 	.word	0x08006a60
 80062bc:	08006a6a 	.word	0x08006a6a
 80062c0:	00000000 	.word	0x00000000
 80062c4:	08006077 	.word	0x08006077
 80062c8:	08006a66 	.word	0x08006a66

080062cc <_printf_common>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	4616      	mov	r6, r2
 80062d2:	4698      	mov	r8, r3
 80062d4:	688a      	ldr	r2, [r1, #8]
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062dc:	4293      	cmp	r3, r2
 80062de:	bfb8      	it	lt
 80062e0:	4613      	movlt	r3, r2
 80062e2:	6033      	str	r3, [r6, #0]
 80062e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062e8:	4607      	mov	r7, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	b10a      	cbz	r2, 80062f2 <_printf_common+0x26>
 80062ee:	3301      	adds	r3, #1
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	0699      	lsls	r1, r3, #26
 80062f6:	bf42      	ittt	mi
 80062f8:	6833      	ldrmi	r3, [r6, #0]
 80062fa:	3302      	addmi	r3, #2
 80062fc:	6033      	strmi	r3, [r6, #0]
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	f015 0506 	ands.w	r5, r5, #6
 8006304:	d106      	bne.n	8006314 <_printf_common+0x48>
 8006306:	f104 0a19 	add.w	sl, r4, #25
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	6832      	ldr	r2, [r6, #0]
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	42ab      	cmp	r3, r5
 8006312:	dc26      	bgt.n	8006362 <_printf_common+0x96>
 8006314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	3b00      	subs	r3, #0
 800631c:	bf18      	it	ne
 800631e:	2301      	movne	r3, #1
 8006320:	0692      	lsls	r2, r2, #26
 8006322:	d42b      	bmi.n	800637c <_printf_common+0xb0>
 8006324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006328:	4641      	mov	r1, r8
 800632a:	4638      	mov	r0, r7
 800632c:	47c8      	blx	r9
 800632e:	3001      	adds	r0, #1
 8006330:	d01e      	beq.n	8006370 <_printf_common+0xa4>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	f003 0306 	and.w	r3, r3, #6
 800633a:	2b04      	cmp	r3, #4
 800633c:	bf02      	ittt	eq
 800633e:	68e5      	ldreq	r5, [r4, #12]
 8006340:	6833      	ldreq	r3, [r6, #0]
 8006342:	1aed      	subeq	r5, r5, r3
 8006344:	68a3      	ldr	r3, [r4, #8]
 8006346:	bf0c      	ite	eq
 8006348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800634c:	2500      	movne	r5, #0
 800634e:	4293      	cmp	r3, r2
 8006350:	bfc4      	itt	gt
 8006352:	1a9b      	subgt	r3, r3, r2
 8006354:	18ed      	addgt	r5, r5, r3
 8006356:	2600      	movs	r6, #0
 8006358:	341a      	adds	r4, #26
 800635a:	42b5      	cmp	r5, r6
 800635c:	d11a      	bne.n	8006394 <_printf_common+0xc8>
 800635e:	2000      	movs	r0, #0
 8006360:	e008      	b.n	8006374 <_printf_common+0xa8>
 8006362:	2301      	movs	r3, #1
 8006364:	4652      	mov	r2, sl
 8006366:	4641      	mov	r1, r8
 8006368:	4638      	mov	r0, r7
 800636a:	47c8      	blx	r9
 800636c:	3001      	adds	r0, #1
 800636e:	d103      	bne.n	8006378 <_printf_common+0xac>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006378:	3501      	adds	r5, #1
 800637a:	e7c6      	b.n	800630a <_printf_common+0x3e>
 800637c:	18e1      	adds	r1, r4, r3
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	2030      	movs	r0, #48	@ 0x30
 8006382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006386:	4422      	add	r2, r4
 8006388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800638c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006390:	3302      	adds	r3, #2
 8006392:	e7c7      	b.n	8006324 <_printf_common+0x58>
 8006394:	2301      	movs	r3, #1
 8006396:	4622      	mov	r2, r4
 8006398:	4641      	mov	r1, r8
 800639a:	4638      	mov	r0, r7
 800639c:	47c8      	blx	r9
 800639e:	3001      	adds	r0, #1
 80063a0:	d0e6      	beq.n	8006370 <_printf_common+0xa4>
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7d9      	b.n	800635a <_printf_common+0x8e>
	...

080063a8 <_printf_i>:
 80063a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	7e0f      	ldrb	r7, [r1, #24]
 80063ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b0:	2f78      	cmp	r7, #120	@ 0x78
 80063b2:	4691      	mov	r9, r2
 80063b4:	4680      	mov	r8, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	469a      	mov	sl, r3
 80063ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063be:	d807      	bhi.n	80063d0 <_printf_i+0x28>
 80063c0:	2f62      	cmp	r7, #98	@ 0x62
 80063c2:	d80a      	bhi.n	80063da <_printf_i+0x32>
 80063c4:	2f00      	cmp	r7, #0
 80063c6:	f000 80d1 	beq.w	800656c <_printf_i+0x1c4>
 80063ca:	2f58      	cmp	r7, #88	@ 0x58
 80063cc:	f000 80b8 	beq.w	8006540 <_printf_i+0x198>
 80063d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063d8:	e03a      	b.n	8006450 <_printf_i+0xa8>
 80063da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063de:	2b15      	cmp	r3, #21
 80063e0:	d8f6      	bhi.n	80063d0 <_printf_i+0x28>
 80063e2:	a101      	add	r1, pc, #4	@ (adr r1, 80063e8 <_printf_i+0x40>)
 80063e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e8:	08006441 	.word	0x08006441
 80063ec:	08006455 	.word	0x08006455
 80063f0:	080063d1 	.word	0x080063d1
 80063f4:	080063d1 	.word	0x080063d1
 80063f8:	080063d1 	.word	0x080063d1
 80063fc:	080063d1 	.word	0x080063d1
 8006400:	08006455 	.word	0x08006455
 8006404:	080063d1 	.word	0x080063d1
 8006408:	080063d1 	.word	0x080063d1
 800640c:	080063d1 	.word	0x080063d1
 8006410:	080063d1 	.word	0x080063d1
 8006414:	08006553 	.word	0x08006553
 8006418:	0800647f 	.word	0x0800647f
 800641c:	0800650d 	.word	0x0800650d
 8006420:	080063d1 	.word	0x080063d1
 8006424:	080063d1 	.word	0x080063d1
 8006428:	08006575 	.word	0x08006575
 800642c:	080063d1 	.word	0x080063d1
 8006430:	0800647f 	.word	0x0800647f
 8006434:	080063d1 	.word	0x080063d1
 8006438:	080063d1 	.word	0x080063d1
 800643c:	08006515 	.word	0x08006515
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6032      	str	r2, [r6, #0]
 8006448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800644c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006450:	2301      	movs	r3, #1
 8006452:	e09c      	b.n	800658e <_printf_i+0x1e6>
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	1d19      	adds	r1, r3, #4
 800645a:	6031      	str	r1, [r6, #0]
 800645c:	0606      	lsls	r6, r0, #24
 800645e:	d501      	bpl.n	8006464 <_printf_i+0xbc>
 8006460:	681d      	ldr	r5, [r3, #0]
 8006462:	e003      	b.n	800646c <_printf_i+0xc4>
 8006464:	0645      	lsls	r5, r0, #25
 8006466:	d5fb      	bpl.n	8006460 <_printf_i+0xb8>
 8006468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800646c:	2d00      	cmp	r5, #0
 800646e:	da03      	bge.n	8006478 <_printf_i+0xd0>
 8006470:	232d      	movs	r3, #45	@ 0x2d
 8006472:	426d      	negs	r5, r5
 8006474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006478:	4858      	ldr	r0, [pc, #352]	@ (80065dc <_printf_i+0x234>)
 800647a:	230a      	movs	r3, #10
 800647c:	e011      	b.n	80064a2 <_printf_i+0xfa>
 800647e:	6821      	ldr	r1, [r4, #0]
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	0608      	lsls	r0, r1, #24
 8006484:	f853 5b04 	ldr.w	r5, [r3], #4
 8006488:	d402      	bmi.n	8006490 <_printf_i+0xe8>
 800648a:	0649      	lsls	r1, r1, #25
 800648c:	bf48      	it	mi
 800648e:	b2ad      	uxthmi	r5, r5
 8006490:	2f6f      	cmp	r7, #111	@ 0x6f
 8006492:	4852      	ldr	r0, [pc, #328]	@ (80065dc <_printf_i+0x234>)
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	bf14      	ite	ne
 8006498:	230a      	movne	r3, #10
 800649a:	2308      	moveq	r3, #8
 800649c:	2100      	movs	r1, #0
 800649e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064a2:	6866      	ldr	r6, [r4, #4]
 80064a4:	60a6      	str	r6, [r4, #8]
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	db05      	blt.n	80064b6 <_printf_i+0x10e>
 80064aa:	6821      	ldr	r1, [r4, #0]
 80064ac:	432e      	orrs	r6, r5
 80064ae:	f021 0104 	bic.w	r1, r1, #4
 80064b2:	6021      	str	r1, [r4, #0]
 80064b4:	d04b      	beq.n	800654e <_printf_i+0x1a6>
 80064b6:	4616      	mov	r6, r2
 80064b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80064bc:	fb03 5711 	mls	r7, r3, r1, r5
 80064c0:	5dc7      	ldrb	r7, [r0, r7]
 80064c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064c6:	462f      	mov	r7, r5
 80064c8:	42bb      	cmp	r3, r7
 80064ca:	460d      	mov	r5, r1
 80064cc:	d9f4      	bls.n	80064b8 <_printf_i+0x110>
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d10b      	bne.n	80064ea <_printf_i+0x142>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07df      	lsls	r7, r3, #31
 80064d6:	d508      	bpl.n	80064ea <_printf_i+0x142>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	6861      	ldr	r1, [r4, #4]
 80064dc:	4299      	cmp	r1, r3
 80064de:	bfde      	ittt	le
 80064e0:	2330      	movle	r3, #48	@ 0x30
 80064e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064ea:	1b92      	subs	r2, r2, r6
 80064ec:	6122      	str	r2, [r4, #16]
 80064ee:	f8cd a000 	str.w	sl, [sp]
 80064f2:	464b      	mov	r3, r9
 80064f4:	aa03      	add	r2, sp, #12
 80064f6:	4621      	mov	r1, r4
 80064f8:	4640      	mov	r0, r8
 80064fa:	f7ff fee7 	bl	80062cc <_printf_common>
 80064fe:	3001      	adds	r0, #1
 8006500:	d14a      	bne.n	8006598 <_printf_i+0x1f0>
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	b004      	add	sp, #16
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	f043 0320 	orr.w	r3, r3, #32
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	4832      	ldr	r0, [pc, #200]	@ (80065e0 <_printf_i+0x238>)
 8006516:	2778      	movs	r7, #120	@ 0x78
 8006518:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	6831      	ldr	r1, [r6, #0]
 8006520:	061f      	lsls	r7, r3, #24
 8006522:	f851 5b04 	ldr.w	r5, [r1], #4
 8006526:	d402      	bmi.n	800652e <_printf_i+0x186>
 8006528:	065f      	lsls	r7, r3, #25
 800652a:	bf48      	it	mi
 800652c:	b2ad      	uxthmi	r5, r5
 800652e:	6031      	str	r1, [r6, #0]
 8006530:	07d9      	lsls	r1, r3, #31
 8006532:	bf44      	itt	mi
 8006534:	f043 0320 	orrmi.w	r3, r3, #32
 8006538:	6023      	strmi	r3, [r4, #0]
 800653a:	b11d      	cbz	r5, 8006544 <_printf_i+0x19c>
 800653c:	2310      	movs	r3, #16
 800653e:	e7ad      	b.n	800649c <_printf_i+0xf4>
 8006540:	4826      	ldr	r0, [pc, #152]	@ (80065dc <_printf_i+0x234>)
 8006542:	e7e9      	b.n	8006518 <_printf_i+0x170>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	f023 0320 	bic.w	r3, r3, #32
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	e7f6      	b.n	800653c <_printf_i+0x194>
 800654e:	4616      	mov	r6, r2
 8006550:	e7bd      	b.n	80064ce <_printf_i+0x126>
 8006552:	6833      	ldr	r3, [r6, #0]
 8006554:	6825      	ldr	r5, [r4, #0]
 8006556:	6961      	ldr	r1, [r4, #20]
 8006558:	1d18      	adds	r0, r3, #4
 800655a:	6030      	str	r0, [r6, #0]
 800655c:	062e      	lsls	r6, r5, #24
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	d501      	bpl.n	8006566 <_printf_i+0x1be>
 8006562:	6019      	str	r1, [r3, #0]
 8006564:	e002      	b.n	800656c <_printf_i+0x1c4>
 8006566:	0668      	lsls	r0, r5, #25
 8006568:	d5fb      	bpl.n	8006562 <_printf_i+0x1ba>
 800656a:	8019      	strh	r1, [r3, #0]
 800656c:	2300      	movs	r3, #0
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	4616      	mov	r6, r2
 8006572:	e7bc      	b.n	80064ee <_printf_i+0x146>
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	1d1a      	adds	r2, r3, #4
 8006578:	6032      	str	r2, [r6, #0]
 800657a:	681e      	ldr	r6, [r3, #0]
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	2100      	movs	r1, #0
 8006580:	4630      	mov	r0, r6
 8006582:	f7f9 fe45 	bl	8000210 <memchr>
 8006586:	b108      	cbz	r0, 800658c <_printf_i+0x1e4>
 8006588:	1b80      	subs	r0, r0, r6
 800658a:	6060      	str	r0, [r4, #4]
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	6123      	str	r3, [r4, #16]
 8006590:	2300      	movs	r3, #0
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006596:	e7aa      	b.n	80064ee <_printf_i+0x146>
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	4632      	mov	r2, r6
 800659c:	4649      	mov	r1, r9
 800659e:	4640      	mov	r0, r8
 80065a0:	47d0      	blx	sl
 80065a2:	3001      	adds	r0, #1
 80065a4:	d0ad      	beq.n	8006502 <_printf_i+0x15a>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	079b      	lsls	r3, r3, #30
 80065aa:	d413      	bmi.n	80065d4 <_printf_i+0x22c>
 80065ac:	68e0      	ldr	r0, [r4, #12]
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	4298      	cmp	r0, r3
 80065b2:	bfb8      	it	lt
 80065b4:	4618      	movlt	r0, r3
 80065b6:	e7a6      	b.n	8006506 <_printf_i+0x15e>
 80065b8:	2301      	movs	r3, #1
 80065ba:	4632      	mov	r2, r6
 80065bc:	4649      	mov	r1, r9
 80065be:	4640      	mov	r0, r8
 80065c0:	47d0      	blx	sl
 80065c2:	3001      	adds	r0, #1
 80065c4:	d09d      	beq.n	8006502 <_printf_i+0x15a>
 80065c6:	3501      	adds	r5, #1
 80065c8:	68e3      	ldr	r3, [r4, #12]
 80065ca:	9903      	ldr	r1, [sp, #12]
 80065cc:	1a5b      	subs	r3, r3, r1
 80065ce:	42ab      	cmp	r3, r5
 80065d0:	dcf2      	bgt.n	80065b8 <_printf_i+0x210>
 80065d2:	e7eb      	b.n	80065ac <_printf_i+0x204>
 80065d4:	2500      	movs	r5, #0
 80065d6:	f104 0619 	add.w	r6, r4, #25
 80065da:	e7f5      	b.n	80065c8 <_printf_i+0x220>
 80065dc:	08006a71 	.word	0x08006a71
 80065e0:	08006a82 	.word	0x08006a82

080065e4 <__sflush_r>:
 80065e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	0716      	lsls	r6, r2, #28
 80065ee:	4605      	mov	r5, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	d454      	bmi.n	800669e <__sflush_r+0xba>
 80065f4:	684b      	ldr	r3, [r1, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dc02      	bgt.n	8006600 <__sflush_r+0x1c>
 80065fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dd48      	ble.n	8006692 <__sflush_r+0xae>
 8006600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006602:	2e00      	cmp	r6, #0
 8006604:	d045      	beq.n	8006692 <__sflush_r+0xae>
 8006606:	2300      	movs	r3, #0
 8006608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800660c:	682f      	ldr	r7, [r5, #0]
 800660e:	6a21      	ldr	r1, [r4, #32]
 8006610:	602b      	str	r3, [r5, #0]
 8006612:	d030      	beq.n	8006676 <__sflush_r+0x92>
 8006614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	0759      	lsls	r1, r3, #29
 800661a:	d505      	bpl.n	8006628 <__sflush_r+0x44>
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006622:	b10b      	cbz	r3, 8006628 <__sflush_r+0x44>
 8006624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800662c:	6a21      	ldr	r1, [r4, #32]
 800662e:	4628      	mov	r0, r5
 8006630:	47b0      	blx	r6
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	d106      	bne.n	8006646 <__sflush_r+0x62>
 8006638:	6829      	ldr	r1, [r5, #0]
 800663a:	291d      	cmp	r1, #29
 800663c:	d82b      	bhi.n	8006696 <__sflush_r+0xb2>
 800663e:	4a2a      	ldr	r2, [pc, #168]	@ (80066e8 <__sflush_r+0x104>)
 8006640:	40ca      	lsrs	r2, r1
 8006642:	07d6      	lsls	r6, r2, #31
 8006644:	d527      	bpl.n	8006696 <__sflush_r+0xb2>
 8006646:	2200      	movs	r2, #0
 8006648:	6062      	str	r2, [r4, #4]
 800664a:	04d9      	lsls	r1, r3, #19
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	d504      	bpl.n	800665c <__sflush_r+0x78>
 8006652:	1c42      	adds	r2, r0, #1
 8006654:	d101      	bne.n	800665a <__sflush_r+0x76>
 8006656:	682b      	ldr	r3, [r5, #0]
 8006658:	b903      	cbnz	r3, 800665c <__sflush_r+0x78>
 800665a:	6560      	str	r0, [r4, #84]	@ 0x54
 800665c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800665e:	602f      	str	r7, [r5, #0]
 8006660:	b1b9      	cbz	r1, 8006692 <__sflush_r+0xae>
 8006662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006666:	4299      	cmp	r1, r3
 8006668:	d002      	beq.n	8006670 <__sflush_r+0x8c>
 800666a:	4628      	mov	r0, r5
 800666c:	f7ff fbf4 	bl	8005e58 <_free_r>
 8006670:	2300      	movs	r3, #0
 8006672:	6363      	str	r3, [r4, #52]	@ 0x34
 8006674:	e00d      	b.n	8006692 <__sflush_r+0xae>
 8006676:	2301      	movs	r3, #1
 8006678:	4628      	mov	r0, r5
 800667a:	47b0      	blx	r6
 800667c:	4602      	mov	r2, r0
 800667e:	1c50      	adds	r0, r2, #1
 8006680:	d1c9      	bne.n	8006616 <__sflush_r+0x32>
 8006682:	682b      	ldr	r3, [r5, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0c6      	beq.n	8006616 <__sflush_r+0x32>
 8006688:	2b1d      	cmp	r3, #29
 800668a:	d001      	beq.n	8006690 <__sflush_r+0xac>
 800668c:	2b16      	cmp	r3, #22
 800668e:	d11e      	bne.n	80066ce <__sflush_r+0xea>
 8006690:	602f      	str	r7, [r5, #0]
 8006692:	2000      	movs	r0, #0
 8006694:	e022      	b.n	80066dc <__sflush_r+0xf8>
 8006696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800669a:	b21b      	sxth	r3, r3
 800669c:	e01b      	b.n	80066d6 <__sflush_r+0xf2>
 800669e:	690f      	ldr	r7, [r1, #16]
 80066a0:	2f00      	cmp	r7, #0
 80066a2:	d0f6      	beq.n	8006692 <__sflush_r+0xae>
 80066a4:	0793      	lsls	r3, r2, #30
 80066a6:	680e      	ldr	r6, [r1, #0]
 80066a8:	bf08      	it	eq
 80066aa:	694b      	ldreq	r3, [r1, #20]
 80066ac:	600f      	str	r7, [r1, #0]
 80066ae:	bf18      	it	ne
 80066b0:	2300      	movne	r3, #0
 80066b2:	eba6 0807 	sub.w	r8, r6, r7
 80066b6:	608b      	str	r3, [r1, #8]
 80066b8:	f1b8 0f00 	cmp.w	r8, #0
 80066bc:	dde9      	ble.n	8006692 <__sflush_r+0xae>
 80066be:	6a21      	ldr	r1, [r4, #32]
 80066c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066c2:	4643      	mov	r3, r8
 80066c4:	463a      	mov	r2, r7
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b0      	blx	r6
 80066ca:	2800      	cmp	r0, #0
 80066cc:	dc08      	bgt.n	80066e0 <__sflush_r+0xfc>
 80066ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e0:	4407      	add	r7, r0
 80066e2:	eba8 0800 	sub.w	r8, r8, r0
 80066e6:	e7e7      	b.n	80066b8 <__sflush_r+0xd4>
 80066e8:	20400001 	.word	0x20400001

080066ec <_fflush_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	690b      	ldr	r3, [r1, #16]
 80066f0:	4605      	mov	r5, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	b913      	cbnz	r3, 80066fc <_fflush_r+0x10>
 80066f6:	2500      	movs	r5, #0
 80066f8:	4628      	mov	r0, r5
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	b118      	cbz	r0, 8006706 <_fflush_r+0x1a>
 80066fe:	6a03      	ldr	r3, [r0, #32]
 8006700:	b90b      	cbnz	r3, 8006706 <_fflush_r+0x1a>
 8006702:	f7ff f9a1 	bl	8005a48 <__sinit>
 8006706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f3      	beq.n	80066f6 <_fflush_r+0xa>
 800670e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006710:	07d0      	lsls	r0, r2, #31
 8006712:	d404      	bmi.n	800671e <_fflush_r+0x32>
 8006714:	0599      	lsls	r1, r3, #22
 8006716:	d402      	bmi.n	800671e <_fflush_r+0x32>
 8006718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671a:	f7ff fb8c 	bl	8005e36 <__retarget_lock_acquire_recursive>
 800671e:	4628      	mov	r0, r5
 8006720:	4621      	mov	r1, r4
 8006722:	f7ff ff5f 	bl	80065e4 <__sflush_r>
 8006726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006728:	07da      	lsls	r2, r3, #31
 800672a:	4605      	mov	r5, r0
 800672c:	d4e4      	bmi.n	80066f8 <_fflush_r+0xc>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	059b      	lsls	r3, r3, #22
 8006732:	d4e1      	bmi.n	80066f8 <_fflush_r+0xc>
 8006734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006736:	f7ff fb7f 	bl	8005e38 <__retarget_lock_release_recursive>
 800673a:	e7dd      	b.n	80066f8 <_fflush_r+0xc>

0800673c <__swhatbuf_r>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	460c      	mov	r4, r1
 8006740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006744:	2900      	cmp	r1, #0
 8006746:	b096      	sub	sp, #88	@ 0x58
 8006748:	4615      	mov	r5, r2
 800674a:	461e      	mov	r6, r3
 800674c:	da0d      	bge.n	800676a <__swhatbuf_r+0x2e>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	bf14      	ite	ne
 800675a:	2340      	movne	r3, #64	@ 0x40
 800675c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006760:	2000      	movs	r0, #0
 8006762:	6031      	str	r1, [r6, #0]
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	b016      	add	sp, #88	@ 0x58
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	466a      	mov	r2, sp
 800676c:	f000 f848 	bl	8006800 <_fstat_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	dbec      	blt.n	800674e <__swhatbuf_r+0x12>
 8006774:	9901      	ldr	r1, [sp, #4]
 8006776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800677a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800677e:	4259      	negs	r1, r3
 8006780:	4159      	adcs	r1, r3
 8006782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006786:	e7eb      	b.n	8006760 <__swhatbuf_r+0x24>

08006788 <__smakebuf_r>:
 8006788:	898b      	ldrh	r3, [r1, #12]
 800678a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678c:	079d      	lsls	r5, r3, #30
 800678e:	4606      	mov	r6, r0
 8006790:	460c      	mov	r4, r1
 8006792:	d507      	bpl.n	80067a4 <__smakebuf_r+0x1c>
 8006794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	2301      	movs	r3, #1
 800679e:	6163      	str	r3, [r4, #20]
 80067a0:	b003      	add	sp, #12
 80067a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a4:	ab01      	add	r3, sp, #4
 80067a6:	466a      	mov	r2, sp
 80067a8:	f7ff ffc8 	bl	800673c <__swhatbuf_r>
 80067ac:	9f00      	ldr	r7, [sp, #0]
 80067ae:	4605      	mov	r5, r0
 80067b0:	4639      	mov	r1, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff fbbc 	bl	8005f30 <_malloc_r>
 80067b8:	b948      	cbnz	r0, 80067ce <__smakebuf_r+0x46>
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	059a      	lsls	r2, r3, #22
 80067c0:	d4ee      	bmi.n	80067a0 <__smakebuf_r+0x18>
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	f043 0302 	orr.w	r3, r3, #2
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	e7e2      	b.n	8006794 <__smakebuf_r+0xc>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	6020      	str	r0, [r4, #0]
 80067d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	9b01      	ldr	r3, [sp, #4]
 80067da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067de:	b15b      	cbz	r3, 80067f8 <__smakebuf_r+0x70>
 80067e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067e4:	4630      	mov	r0, r6
 80067e6:	f000 f81d 	bl	8006824 <_isatty_r>
 80067ea:	b128      	cbz	r0, 80067f8 <__smakebuf_r+0x70>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	431d      	orrs	r5, r3
 80067fc:	81a5      	strh	r5, [r4, #12]
 80067fe:	e7cf      	b.n	80067a0 <__smakebuf_r+0x18>

08006800 <_fstat_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d07      	ldr	r5, [pc, #28]	@ (8006820 <_fstat_r+0x20>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	f7fa fdd0 	bl	80013b2 <_fstat>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	d102      	bne.n	800681c <_fstat_r+0x1c>
 8006816:	682b      	ldr	r3, [r5, #0]
 8006818:	b103      	cbz	r3, 800681c <_fstat_r+0x1c>
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	20004208 	.word	0x20004208

08006824 <_isatty_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	@ (8006840 <_isatty_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fa fdcf 	bl	80013d2 <_isatty>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_isatty_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_isatty_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20004208 	.word	0x20004208

08006844 <_sbrk_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d06      	ldr	r5, [pc, #24]	@ (8006860 <_sbrk_r+0x1c>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	f7fa fdd8 	bl	8001404 <_sbrk>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_sbrk_r+0x1a>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_sbrk_r+0x1a>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20004208 	.word	0x20004208

08006864 <_init>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	bf00      	nop
 8006868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686a:	bc08      	pop	{r3}
 800686c:	469e      	mov	lr, r3
 800686e:	4770      	bx	lr

08006870 <_fini>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr
